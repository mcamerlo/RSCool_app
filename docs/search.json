[
  {
    "objectID": "j3.1_linguagem.html",
    "href": "j3.1_linguagem.html",
    "title": "LINGUAGEM",
    "section": "",
    "text": "O assignment operator (&lt;-) é a ferramenta chave para a criação de objetos R.\nExemplos de criação de variáveis:\n\nvar_numeric &lt;- c(2.5  ,3.5 ,6.5  , -3.5, 0 , 7.7) \n\nvar_integer &lt;- c(2    ,3    ,6   , -3,   2,   9)\n\nvar_factor &lt;- factor (c(\"alto\",\"baixo\",\"baixo\", \"alto\", \"alto\", \"baixo\"))\n\nvar_character &lt;- c(\"João\",\"Rute\",\"Pedro\", \"Filipa\", \"Ana\", \"Fatima\")\n\nvar_log &lt;- c(TRUE,TRUE,TRUE,FALSE,FALSE,TRUE)\n\nvar_integerNA &lt;- c(2    ,3    ,NA   , -3, NA, NA)\n\n\nExemplos de criação de uma dataframe:\n\nDF &lt;- data.frame (var_character,var_numeric,var_integer,var_factor,var_log,var_integerNA)\n\n\n\n\n\n\n\n\nVectores numeric\n\nvar_numeric\n\n[1]  2.5  3.5  6.5 -3.5  0.0  7.7\n\n\n\nVectores integer\n\nvar_integer\n\n[1]  2  3  6 -3  2  9\n\n\n\nVectores factor\n\nvar_factor\n\n[1] alto  baixo baixo alto  alto  baixo\nLevels: alto baixo\n\n\n\nVectores character\n\nvar_character\n\n[1] \"João\"   \"Rute\"   \"Pedro\"  \"Filipa\" \"Ana\"    \"Fatima\"\n\n\n\nVectores lógico\n\nvar_log\n\n[1]  TRUE  TRUE  TRUE FALSE FALSE  TRUE\n\n\n\n\n\n\n\nDF\n\n  var_character var_numeric var_integer var_factor var_log var_integerNA\n1          João         2.5           2       alto    TRUE             2\n2          Rute         3.5           3      baixo    TRUE             3\n3         Pedro         6.5           6      baixo    TRUE            NA\n4        Filipa        -3.5          -3       alto   FALSE            -3\n5           Ana         0.0           2       alto   FALSE            NA\n6        Fatima         7.7           9      baixo    TRUE            NA\n\n\n\n\n\n\n\ntable (var_factor)\n\nvar_factor\n alto baixo \n    3     3 \n\n\n\n\n\n\n\nplot (var_numeric)\n\n\n\n\n \n\n\n\n\n\n\n\nOperador\nDescrição\n\n\n\n\n+\naddition\n\n\n-\nsubtraction\n\n\n*\nmultiplication\n\n\n/\ndivision\n\n\n^ or **\nexponentiation\n\n\nx %/% y\ninteger division 5%/%2 is 2\n\n\n\n\n\n\n\n\n\n\n\nOperador\nDescrição\n\n\n\n\n&lt;\nless than\n\n\n&lt;=\nless than or equal to\n\n\n&gt;\ngreater than\n\n\n&gt;=\ngreater than or equal to\n\n\n==\nexactly equal to\n\n\n!=\nnot equal to\n\n\n!x\nNot x\n\n\nx\ny\n\n\nx & y\nx E y\n\n\nis.na(x)\ntestar se x tem NAs\n\n\n%in%\n“a %in% c(a, b, c)”: Is a in the group c(a, b, c)?\n\n\n\n” %in% is the only operator that does not do normal element-wise execution. %in% tests whether the value(s) on the left side are in the vector on the right side.” (Ver Grolemund 2014: 81)   \n\n\n\n\n\nc(): combinar ou concatenar\n\n\nc  (25  , 33  ,  30  , 42  ,  26  ,  28) \n\n[1] 25 33 30 42 26 28\n\n\n\n\nseq(): sequênciar\n\n\nseq (1,6)\n\n[1] 1 2 3 4 5 6\n\n\n\n\nrep(): replicar \n\n\nrep (2017, 6)    # replicar 2017 6 vezes     \n\n[1] 2017 2017 2017 2017 2017 2017\n\n\n\n\nOutras funções comuns\n\n\n\n\n\n\n\n\nFunção\nDescrição\n\n\n\n\nseq(from , to, by)\ngenerate a sequence\n\n\nrep(x, ntimes)\nrepeat x n times\n\n\ncut(x, n)\ndivide continuous variable in factor with n levels\n\n\nsort (x)\nordenar\n\n\nlength (x)\nextensão\n\n\n\ncbind(objeto1, objeto2, …) # combina objetos como colunas\nrbind(objeto1, objeto2, …) # combina objetos como linhas\n\n\n\n\n\n\nlength(DF$var_numeric)\n\n[1] 6\n\nsum(DF$var_numeric)\n\n[1] 16.7\n\nmean (DF$var_numeric)\n\n[1] 2.783333\n\nmedian(DF$var_numeric)\n\n[1] 3\n\nsort  (DF$var_numeric)  \n\n[1] -3.5  0.0  2.5  3.5  6.5  7.7\n\ntable (DF$var_factor)\n\n\n alto baixo \n    3     3 \n\n\n\nclass (DF$var_numeric)\n\n[1] \"numeric\"\n\nclass (DF$var_integer)\n\n[1] \"numeric\"\n\nclass ( DF$var_factor)\n\n[1] \"factor\"\n\nclass ( DF$var_character)\n\n[1] \"character\"\n\n\n\n\n\n\n\n\nis.na(DF$var_integerNA)\n\n[1] FALSE FALSE  TRUE FALSE  TRUE  TRUE\n\n!is.na(DF$var_integerNA)\n\n[1]  TRUE  TRUE FALSE  TRUE FALSE FALSE\n\n\n\ntable (is.na(DF$var_integerNA) )\n\n\nFALSE  TRUE \n    3     3 \n\ntable (DF$var_integerNA, exclude = FALSE)\n\n\n  -3    2    3 &lt;NA&gt; \n   1    1    1    3 \n\n\n\n\n\n\n\n\nDF$var_num\n\n[1]  2.5  3.5  6.5 -3.5  0.0  7.7\n\nDF$var_num [1]   \n\n[1] 2.5\n\nDF$var_num [4]  \n\n[1] -3.5\n\nDF$var_num [1:3]\n\n[1] 2.5 3.5 6.5\n\nDF$var_num [2:5]\n\n[1]  3.5  6.5 -3.5  0.0\n\nDF$var_num [4:1]\n\n[1] -3.5  6.5  3.5  2.5\n\nDF$var_num [-1]      # indice negativo\n\n[1]  3.5  6.5 -3.5  0.0  7.7\n\nDF$var_num [20]  # fora do rango\n\n[1] NA\n\n\n\n\n\n\n\n\nclass (DF)     # classe de objeto      \n\n[1] \"data.frame\"\n\nnrow (DF)    # numero de linhas  \n\n[1] 6\n\nncol (DF)    # numero de colunas  \n\n[1] 6\n\ndim(DF)      # dimensão (linhas & colunas)   \n\n[1] 6 6\n\nobject.size(DF) # tamanho em bytes\n\n2472 bytes\n\nnames (DF)  # nome das variáveis \n\n[1] \"var_character\" \"var_numeric\"   \"var_integer\"   \"var_factor\"   \n[5] \"var_log\"       \"var_integerNA\"\n\nhead (DF)    # Primeiras 6 observações da base\n\n  var_character var_numeric var_integer var_factor var_log var_integerNA\n1          João         2.5           2       alto    TRUE             2\n2          Rute         3.5           3      baixo    TRUE             3\n3         Pedro         6.5           6      baixo    TRUE            NA\n4        Filipa        -3.5          -3       alto   FALSE            -3\n5           Ana         0.0           2       alto   FALSE            NA\n6        Fatima         7.7           9      baixo    TRUE            NA\n\nhead (DF, 13)  # Primeiras 13 observações da base\n\n  var_character var_numeric var_integer var_factor var_log var_integerNA\n1          João         2.5           2       alto    TRUE             2\n2          Rute         3.5           3      baixo    TRUE             3\n3         Pedro         6.5           6      baixo    TRUE            NA\n4        Filipa        -3.5          -3       alto   FALSE            -3\n5           Ana         0.0           2       alto   FALSE            NA\n6        Fatima         7.7           9      baixo    TRUE            NA\n\ntail (DF)      # últimas 6 observações da base\n\n  var_character var_numeric var_integer var_factor var_log var_integerNA\n1          João         2.5           2       alto    TRUE             2\n2          Rute         3.5           3      baixo    TRUE             3\n3         Pedro         6.5           6      baixo    TRUE            NA\n4        Filipa        -3.5          -3       alto   FALSE            -3\n5           Ana         0.0           2       alto   FALSE            NA\n6        Fatima         7.7           9      baixo    TRUE            NA\n\ntail (DF, 10)    # últimas 10 observações da base\n\n  var_character var_numeric var_integer var_factor var_log var_integerNA\n1          João         2.5           2       alto    TRUE             2\n2          Rute         3.5           3      baixo    TRUE             3\n3         Pedro         6.5           6      baixo    TRUE            NA\n4        Filipa        -3.5          -3       alto   FALSE            -3\n5           Ana         0.0           2       alto   FALSE            NA\n6        Fatima         7.7           9      baixo    TRUE            NA\n\nsummary(DF)     # sommario de cada variável da base\n\n var_character       var_numeric      var_integer     var_factor\n Length:6           Min.   :-3.500   Min.   :-3.000   alto :3   \n Class :character   1st Qu.: 0.625   1st Qu.: 2.000   baixo:3   \n Mode  :character   Median : 3.000   Median : 2.500             \n                    Mean   : 2.783   Mean   : 3.167             \n                    3rd Qu.: 5.750   3rd Qu.: 5.250             \n                    Max.   : 7.700   Max.   : 9.000             \n                                                                \n  var_log        var_integerNA    \n Mode :logical   Min.   :-3.0000  \n FALSE:2         1st Qu.:-0.5000  \n TRUE :4         Median : 2.0000  \n                 Mean   : 0.6667  \n                 3rd Qu.: 2.5000  \n                 Max.   : 3.0000  \n                 NA's   :3        \n\nstr (DF)       # estrutura da base\n\n'data.frame':   6 obs. of  6 variables:\n $ var_character: chr  \"João\" \"Rute\" \"Pedro\" \"Filipa\" ...\n $ var_numeric  : num  2.5 3.5 6.5 -3.5 0 7.7\n $ var_integer  : num  2 3 6 -3 2 9\n $ var_factor   : Factor w/ 2 levels \"alto\",\"baixo\": 1 2 2 1 1 2\n $ var_log      : logi  TRUE TRUE TRUE FALSE FALSE TRUE\n $ var_integerNA: num  2 3 NA -3 NA NA\n\n\n\n\n\n\n\n\nDF\n\n  var_character var_numeric var_integer var_factor var_log var_integerNA\n1          João         2.5           2       alto    TRUE             2\n2          Rute         3.5           3      baixo    TRUE             3\n3         Pedro         6.5           6      baixo    TRUE            NA\n4        Filipa        -3.5          -3       alto   FALSE            -3\n5           Ana         0.0           2       alto   FALSE            NA\n6        Fatima         7.7           9      baixo    TRUE            NA\n\nDF [1  ,6 ]         #  linha 1      , coluna 6\n\n[1] 2\n\nDF [1  , ]      # linha 1       , colunas todas\n\n  var_character var_numeric var_integer var_factor var_log var_integerNA\n1          João         2.5           2       alto    TRUE             2\n\nDF [ ,6 ]        # linhas todas, coluna 6\n\n[1]  2  3 NA -3 NA NA\n\nDF [1:5, ]  # linhas 1 a 5  , colunas todas\n\n  var_character var_numeric var_integer var_factor var_log var_integerNA\n1          João         2.5           2       alto    TRUE             2\n2          Rute         3.5           3      baixo    TRUE             3\n3         Pedro         6.5           6      baixo    TRUE            NA\n4        Filipa        -3.5          -3       alto   FALSE            -3\n5           Ana         0.0           2       alto   FALSE            NA\n\nDF [ , 3:6]     # linhas todas  , colunas 3 a 6 \n\n  var_integer var_factor var_log var_integerNA\n1           2       alto    TRUE             2\n2           3      baixo    TRUE             3\n3           6      baixo    TRUE            NA\n4          -3       alto   FALSE            -3\n5           2       alto   FALSE            NA\n6           9      baixo    TRUE            NA\n\nDF [1:3,4:6]\n\n  var_factor var_log var_integerNA\n1       alto    TRUE             2\n2      baixo    TRUE             3\n3      baixo    TRUE            NA\n\nDF [c(1,2,3), c(4,5,6)]\n\n  var_factor var_log var_integerNA\n1       alto    TRUE             2\n2      baixo    TRUE             3\n3      baixo    TRUE            NA\n\nDF [  ,-c(1,2)]  # linhas todas, colunas todas menos 1 e 2\n\n  var_integer var_factor var_log var_integerNA\n1           2       alto    TRUE             2\n2           3      baixo    TRUE             3\n3           6      baixo    TRUE            NA\n4          -3       alto   FALSE            -3\n5           2       alto   FALSE            NA\n6           9      baixo    TRUE            NA\n\n\n\n\n\n\n\n\nplot (data1$gas19)\n\n\nhist (data1$gas19)\n\nboxplot (data1$gas19)\n\nbarplot(table (data1$exp19))"
  },
  {
    "objectID": "j3.1_linguagem.html#o-assignment-operator",
    "href": "j3.1_linguagem.html#o-assignment-operator",
    "title": "LINGUAGEM",
    "section": "",
    "text": "O assignment operator (&lt;-) é a ferramenta chave para a criação de objetos R.\nExemplos de criação de variáveis:\n\nvar_numeric &lt;- c(2.5  ,3.5 ,6.5  , -3.5, 0 , 7.7) \n\nvar_integer &lt;- c(2    ,3    ,6   , -3,   2,   9)\n\nvar_factor &lt;- factor (c(\"alto\",\"baixo\",\"baixo\", \"alto\", \"alto\", \"baixo\"))\n\nvar_character &lt;- c(\"João\",\"Rute\",\"Pedro\", \"Filipa\", \"Ana\", \"Fatima\")\n\nvar_log &lt;- c(TRUE,TRUE,TRUE,FALSE,FALSE,TRUE)\n\nvar_integerNA &lt;- c(2    ,3    ,NA   , -3, NA, NA)\n\n\nExemplos de criação de uma dataframe:\n\nDF &lt;- data.frame (var_character,var_numeric,var_integer,var_factor,var_log,var_integerNA)"
  },
  {
    "objectID": "j3.1_linguagem.html#objectos-mais-frequentes",
    "href": "j3.1_linguagem.html#objectos-mais-frequentes",
    "title": "LINGUAGEM",
    "section": "",
    "text": "Vectores numeric\n\nvar_numeric\n\n[1]  2.5  3.5  6.5 -3.5  0.0  7.7\n\n\n\nVectores integer\n\nvar_integer\n\n[1]  2  3  6 -3  2  9\n\n\n\nVectores factor\n\nvar_factor\n\n[1] alto  baixo baixo alto  alto  baixo\nLevels: alto baixo\n\n\n\nVectores character\n\nvar_character\n\n[1] \"João\"   \"Rute\"   \"Pedro\"  \"Filipa\" \"Ana\"    \"Fatima\"\n\n\n\nVectores lógico\n\nvar_log\n\n[1]  TRUE  TRUE  TRUE FALSE FALSE  TRUE\n\n\n\n\n\n\n\nDF\n\n  var_character var_numeric var_integer var_factor var_log var_integerNA\n1          João         2.5           2       alto    TRUE             2\n2          Rute         3.5           3      baixo    TRUE             3\n3         Pedro         6.5           6      baixo    TRUE            NA\n4        Filipa        -3.5          -3       alto   FALSE            -3\n5           Ana         0.0           2       alto   FALSE            NA\n6        Fatima         7.7           9      baixo    TRUE            NA\n\n\n\n\n\n\n\ntable (var_factor)\n\nvar_factor\n alto baixo \n    3     3 \n\n\n\n\n\n\n\nplot (var_numeric)"
  },
  {
    "objectID": "j3.1_linguagem.html#operadores-aritméticos",
    "href": "j3.1_linguagem.html#operadores-aritméticos",
    "title": "LINGUAGEM",
    "section": "",
    "text": "Operador\nDescrição\n\n\n\n\n+\naddition\n\n\n-\nsubtraction\n\n\n*\nmultiplication\n\n\n/\ndivision\n\n\n^ or **\nexponentiation\n\n\nx %/% y\ninteger division 5%/%2 is 2"
  },
  {
    "objectID": "j3.1_linguagem.html#operadores-lógicos",
    "href": "j3.1_linguagem.html#operadores-lógicos",
    "title": "LINGUAGEM",
    "section": "",
    "text": "Operador\nDescrição\n\n\n\n\n&lt;\nless than\n\n\n&lt;=\nless than or equal to\n\n\n&gt;\ngreater than\n\n\n&gt;=\ngreater than or equal to\n\n\n==\nexactly equal to\n\n\n!=\nnot equal to\n\n\n!x\nNot x\n\n\nx\ny\n\n\nx & y\nx E y\n\n\nis.na(x)\ntestar se x tem NAs\n\n\n%in%\n“a %in% c(a, b, c)”: Is a in the group c(a, b, c)?\n\n\n\n” %in% is the only operator that does not do normal element-wise execution. %in% tests whether the value(s) on the left side are in the vector on the right side.” (Ver Grolemund 2014: 81)"
  },
  {
    "objectID": "j3.1_linguagem.html#funções-básicas",
    "href": "j3.1_linguagem.html#funções-básicas",
    "title": "LINGUAGEM",
    "section": "",
    "text": "c(): combinar ou concatenar\n\n\nc  (25  , 33  ,  30  , 42  ,  26  ,  28) \n\n[1] 25 33 30 42 26 28\n\n\n\n\nseq(): sequênciar\n\n\nseq (1,6)\n\n[1] 1 2 3 4 5 6\n\n\n\n\nrep(): replicar \n\n\nrep (2017, 6)    # replicar 2017 6 vezes     \n\n[1] 2017 2017 2017 2017 2017 2017\n\n\n\n\nOutras funções comuns\n\n\n\n\n\n\n\n\nFunção\nDescrição\n\n\n\n\nseq(from , to, by)\ngenerate a sequence\n\n\nrep(x, ntimes)\nrepeat x n times\n\n\ncut(x, n)\ndivide continuous variable in factor with n levels\n\n\nsort (x)\nordenar\n\n\nlength (x)\nextensão\n\n\n\ncbind(objeto1, objeto2, …) # combina objetos como colunas\nrbind(objeto1, objeto2, …) # combina objetos como linhas"
  },
  {
    "objectID": "j3.1_linguagem.html#funções-variáveis",
    "href": "j3.1_linguagem.html#funções-variáveis",
    "title": "LINGUAGEM",
    "section": "",
    "text": "length(DF$var_numeric)\n\n[1] 6\n\nsum(DF$var_numeric)\n\n[1] 16.7\n\nmean (DF$var_numeric)\n\n[1] 2.783333\n\nmedian(DF$var_numeric)\n\n[1] 3\n\nsort  (DF$var_numeric)  \n\n[1] -3.5  0.0  2.5  3.5  6.5  7.7\n\ntable (DF$var_factor)\n\n\n alto baixo \n    3     3 \n\n\n\nclass (DF$var_numeric)\n\n[1] \"numeric\"\n\nclass (DF$var_integer)\n\n[1] \"numeric\"\n\nclass ( DF$var_factor)\n\n[1] \"factor\"\n\nclass ( DF$var_character)\n\n[1] \"character\""
  },
  {
    "objectID": "j3.1_linguagem.html#nas",
    "href": "j3.1_linguagem.html#nas",
    "title": "LINGUAGEM",
    "section": "",
    "text": "is.na(DF$var_integerNA)\n\n[1] FALSE FALSE  TRUE FALSE  TRUE  TRUE\n\n!is.na(DF$var_integerNA)\n\n[1]  TRUE  TRUE FALSE  TRUE FALSE FALSE\n\n\n\ntable (is.na(DF$var_integerNA) )\n\n\nFALSE  TRUE \n    3     3 \n\ntable (DF$var_integerNA, exclude = FALSE)\n\n\n  -3    2    3 &lt;NA&gt; \n   1    1    1    3"
  },
  {
    "objectID": "j3.1_linguagem.html#parêntesis-rectos-variáveis",
    "href": "j3.1_linguagem.html#parêntesis-rectos-variáveis",
    "title": "LINGUAGEM",
    "section": "",
    "text": "DF$var_num\n\n[1]  2.5  3.5  6.5 -3.5  0.0  7.7\n\nDF$var_num [1]   \n\n[1] 2.5\n\nDF$var_num [4]  \n\n[1] -3.5\n\nDF$var_num [1:3]\n\n[1] 2.5 3.5 6.5\n\nDF$var_num [2:5]\n\n[1]  3.5  6.5 -3.5  0.0\n\nDF$var_num [4:1]\n\n[1] -3.5  6.5  3.5  2.5\n\nDF$var_num [-1]      # indice negativo\n\n[1]  3.5  6.5 -3.5  0.0  7.7\n\nDF$var_num [20]  # fora do rango\n\n[1] NA"
  },
  {
    "objectID": "j3.1_linguagem.html#funções-bases",
    "href": "j3.1_linguagem.html#funções-bases",
    "title": "LINGUAGEM",
    "section": "",
    "text": "class (DF)     # classe de objeto      \n\n[1] \"data.frame\"\n\nnrow (DF)    # numero de linhas  \n\n[1] 6\n\nncol (DF)    # numero de colunas  \n\n[1] 6\n\ndim(DF)      # dimensão (linhas & colunas)   \n\n[1] 6 6\n\nobject.size(DF) # tamanho em bytes\n\n2472 bytes\n\nnames (DF)  # nome das variáveis \n\n[1] \"var_character\" \"var_numeric\"   \"var_integer\"   \"var_factor\"   \n[5] \"var_log\"       \"var_integerNA\"\n\nhead (DF)    # Primeiras 6 observações da base\n\n  var_character var_numeric var_integer var_factor var_log var_integerNA\n1          João         2.5           2       alto    TRUE             2\n2          Rute         3.5           3      baixo    TRUE             3\n3         Pedro         6.5           6      baixo    TRUE            NA\n4        Filipa        -3.5          -3       alto   FALSE            -3\n5           Ana         0.0           2       alto   FALSE            NA\n6        Fatima         7.7           9      baixo    TRUE            NA\n\nhead (DF, 13)  # Primeiras 13 observações da base\n\n  var_character var_numeric var_integer var_factor var_log var_integerNA\n1          João         2.5           2       alto    TRUE             2\n2          Rute         3.5           3      baixo    TRUE             3\n3         Pedro         6.5           6      baixo    TRUE            NA\n4        Filipa        -3.5          -3       alto   FALSE            -3\n5           Ana         0.0           2       alto   FALSE            NA\n6        Fatima         7.7           9      baixo    TRUE            NA\n\ntail (DF)      # últimas 6 observações da base\n\n  var_character var_numeric var_integer var_factor var_log var_integerNA\n1          João         2.5           2       alto    TRUE             2\n2          Rute         3.5           3      baixo    TRUE             3\n3         Pedro         6.5           6      baixo    TRUE            NA\n4        Filipa        -3.5          -3       alto   FALSE            -3\n5           Ana         0.0           2       alto   FALSE            NA\n6        Fatima         7.7           9      baixo    TRUE            NA\n\ntail (DF, 10)    # últimas 10 observações da base\n\n  var_character var_numeric var_integer var_factor var_log var_integerNA\n1          João         2.5           2       alto    TRUE             2\n2          Rute         3.5           3      baixo    TRUE             3\n3         Pedro         6.5           6      baixo    TRUE            NA\n4        Filipa        -3.5          -3       alto   FALSE            -3\n5           Ana         0.0           2       alto   FALSE            NA\n6        Fatima         7.7           9      baixo    TRUE            NA\n\nsummary(DF)     # sommario de cada variável da base\n\n var_character       var_numeric      var_integer     var_factor\n Length:6           Min.   :-3.500   Min.   :-3.000   alto :3   \n Class :character   1st Qu.: 0.625   1st Qu.: 2.000   baixo:3   \n Mode  :character   Median : 3.000   Median : 2.500             \n                    Mean   : 2.783   Mean   : 3.167             \n                    3rd Qu.: 5.750   3rd Qu.: 5.250             \n                    Max.   : 7.700   Max.   : 9.000             \n                                                                \n  var_log        var_integerNA    \n Mode :logical   Min.   :-3.0000  \n FALSE:2         1st Qu.:-0.5000  \n TRUE :4         Median : 2.0000  \n                 Mean   : 0.6667  \n                 3rd Qu.: 2.5000  \n                 Max.   : 3.0000  \n                 NA's   :3        \n\nstr (DF)       # estrutura da base\n\n'data.frame':   6 obs. of  6 variables:\n $ var_character: chr  \"João\" \"Rute\" \"Pedro\" \"Filipa\" ...\n $ var_numeric  : num  2.5 3.5 6.5 -3.5 0 7.7\n $ var_integer  : num  2 3 6 -3 2 9\n $ var_factor   : Factor w/ 2 levels \"alto\",\"baixo\": 1 2 2 1 1 2\n $ var_log      : logi  TRUE TRUE TRUE FALSE FALSE TRUE\n $ var_integerNA: num  2 3 NA -3 NA NA"
  },
  {
    "objectID": "j3.1_linguagem.html#parêntesis-bases",
    "href": "j3.1_linguagem.html#parêntesis-bases",
    "title": "LINGUAGEM",
    "section": "",
    "text": "DF\n\n  var_character var_numeric var_integer var_factor var_log var_integerNA\n1          João         2.5           2       alto    TRUE             2\n2          Rute         3.5           3      baixo    TRUE             3\n3         Pedro         6.5           6      baixo    TRUE            NA\n4        Filipa        -3.5          -3       alto   FALSE            -3\n5           Ana         0.0           2       alto   FALSE            NA\n6        Fatima         7.7           9      baixo    TRUE            NA\n\nDF [1  ,6 ]         #  linha 1      , coluna 6\n\n[1] 2\n\nDF [1  , ]      # linha 1       , colunas todas\n\n  var_character var_numeric var_integer var_factor var_log var_integerNA\n1          João         2.5           2       alto    TRUE             2\n\nDF [ ,6 ]        # linhas todas, coluna 6\n\n[1]  2  3 NA -3 NA NA\n\nDF [1:5, ]  # linhas 1 a 5  , colunas todas\n\n  var_character var_numeric var_integer var_factor var_log var_integerNA\n1          João         2.5           2       alto    TRUE             2\n2          Rute         3.5           3      baixo    TRUE             3\n3         Pedro         6.5           6      baixo    TRUE            NA\n4        Filipa        -3.5          -3       alto   FALSE            -3\n5           Ana         0.0           2       alto   FALSE            NA\n\nDF [ , 3:6]     # linhas todas  , colunas 3 a 6 \n\n  var_integer var_factor var_log var_integerNA\n1           2       alto    TRUE             2\n2           3      baixo    TRUE             3\n3           6      baixo    TRUE            NA\n4          -3       alto   FALSE            -3\n5           2       alto   FALSE            NA\n6           9      baixo    TRUE            NA\n\nDF [1:3,4:6]\n\n  var_factor var_log var_integerNA\n1       alto    TRUE             2\n2      baixo    TRUE             3\n3      baixo    TRUE            NA\n\nDF [c(1,2,3), c(4,5,6)]\n\n  var_factor var_log var_integerNA\n1       alto    TRUE             2\n2      baixo    TRUE             3\n3      baixo    TRUE            NA\n\nDF [  ,-c(1,2)]  # linhas todas, colunas todas menos 1 e 2\n\n  var_integer var_factor var_log var_integerNA\n1           2       alto    TRUE             2\n2           3      baixo    TRUE             3\n3           6      baixo    TRUE            NA\n4          -3       alto   FALSE            -3\n5           2       alto   FALSE            NA\n6           9      baixo    TRUE            NA"
  },
  {
    "objectID": "j3.1_linguagem.html#gráficos",
    "href": "j3.1_linguagem.html#gráficos",
    "title": "LINGUAGEM",
    "section": "",
    "text": "plot (data1$gas19)\n\n\nhist (data1$gas19)\n\nboxplot (data1$gas19)\n\nbarplot(table (data1$exp19))"
  },
  {
    "objectID": "FalandoR - cópia.html#ilustração-da-sintaxe-básica",
    "href": "FalandoR - cópia.html#ilustração-da-sintaxe-básica",
    "title": "Falando R",
    "section": "Ilustração da Sintaxe Básica",
    "text": "Ilustração da Sintaxe Básica"
  },
  {
    "objectID": "FalandoR - cópia.html#estrutura-completa-de-uma-f",
    "href": "FalandoR - cópia.html#estrutura-completa-de-uma-f",
    "title": "Falando R",
    "section": "Estrutura completa de uma f()",
    "text": "Estrutura completa de uma f()\n\n\nseq(from = 1, to = 6, by = 1)  # 3 parameters\n\n\n\nmantendo as posições dos parâmetros…\n\n\n\n\nseq (1,6)\n\n[1] 1 2 3 4 5 6\n\n\n\n\nmais se mudarmos de posições …\n\n\n\n\nseq( to = 6, by = 1, from = 1)\n\n[1] 1 2 3 4 5 6\n\n\n\n\n\n? seq"
  },
  {
    "objectID": "FalandoR - cópia.html#vectores-numéricos",
    "href": "FalandoR - cópia.html#vectores-numéricos",
    "title": "Falando R",
    "section": "Vectores numéricos",
    "text": "Vectores numéricos\nCriação de objecto “gas19”:\n\na: controlo da sintaxe\n\n\n\nc  (25  , 33  ,  30  , 42  ,  26  ,  28) \n\n[1] 25 33 30 42 26 28\n\n\n\n\n\nb: executar\n\n\n\n\ngas19   &lt;-c  (25,33,30,42,26,28)\n\n\nc: controlar novo objecto:\n\n\n\n\ngas19\n\n[1] 25 33 30 42 26 28"
  },
  {
    "objectID": "FalandoR - cópia.html#calculating-over-numerics",
    "href": "FalandoR - cópia.html#calculating-over-numerics",
    "title": "Falando R",
    "section": "Calculating over numerics",
    "text": "Calculating over numerics\n\n\nmean (data1$gas19)\n\n[1] 30.66667\n\n\n\n\n\n\nmean (data1$gas20)\n\n[1] 35.66667\n\n\n\n\n\n\nmean (data1$gas21)\n\n[1] NA"
  },
  {
    "objectID": "FalandoR - cópia.html#recodificar-variáveis",
    "href": "FalandoR - cópia.html#recodificar-variáveis",
    "title": "Falando R",
    "section": "Recodificar variáveis",
    "text": "Recodificar variáveis\n\nComo ler isto? \n\n\n\n\nifelse (data1$gas19 &gt;30 ,      c (1), c(0) )\n\n\n\n\nCriar uma “dummy” a partir de gas19 (mais/menos 30)."
  },
  {
    "objectID": "FalandoR - cópia.html#tarefa-explorar",
    "href": "FalandoR - cópia.html#tarefa-explorar",
    "title": "Falando R",
    "section": "TAREFA: Explorar",
    "text": "TAREFA: Explorar\n?plot\n\numa forma de explorar: copiar/colar um exemplo:\n\n\nplot(x &lt;- sort(rnorm(47)), type = \"s\", main = \"plot(x, type = \\\"s\\\")\")\n\npoints(x, cex = .5, col = \"dark red\")"
  },
  {
    "objectID": "FalandoR - cópia.html#distribuição-normal",
    "href": "FalandoR - cópia.html#distribuição-normal",
    "title": "Falando R",
    "section": "Distribuição Normal",
    "text": "Distribuição Normal\n\n\n\nrnorm (10)   # standard normal dist.(mean=0,st.dev=1), 10 n \n\n\n\n [1]  0.59766455  0.78111799 -0.25362603 -1.27835413  0.08085445  1.95308700\n [7]  0.04336791 -0.16613886 -0.15513629 -1.12703853\n\n\n\n\n\n\nrnorm (10, 100, 25) # normal dist.with m=100,std=25)\n\n\n\n [1]  81.39257  70.17800  80.44424  96.19946 112.22596 122.24717  58.27878\n [8] 101.38087  96.03039 121.52442"
  },
  {
    "objectID": "FalandoR - cópia.html#moeda",
    "href": "FalandoR - cópia.html#moeda",
    "title": "Falando R",
    "section": "moeda",
    "text": "moeda\n\n\nsample (0:1, 10, replace=T)\n\n [1] 1 0 0 1 1 0 1 1 0 0\n\n\n\nsample (c(0,1), 100, replace=TRUE) \n\n  [1] 0 0 1 1 1 0 1 0 1 0 1 1 0 1 1 1 0 1 0 0 1 1 0 1 0 0 1 1 1 1 1 0 1 0 0 1 1\n [38] 1 0 0 0 0 1 1 1 0 0 1 0 0 1 1 0 0 1 1 0 0 0 0 1 0 0 1 1 1 0 1 0 1 0 1 1 1\n [75] 1 1 1 1 0 1 1 1 1 1 1 0 1 0 0 1 1 1 0 0 0 1 1 1 1 1"
  },
  {
    "objectID": "FalandoR - cópia.html#dado-1",
    "href": "FalandoR - cópia.html#dado-1",
    "title": "Falando R",
    "section": "dado: 1",
    "text": "dado: 1\n\nsample (1:6, 4, replace=TRUE) \n\n[1] 6 3 5 3\n\n\n\n\n\nsample (1:6, 4, replace=TRUE) \n\n[1] 6 3 4 2\n\n\n\n\n\n\nsample (1:6, 4, replace=TRUE) \n\n[1] 1 4 1 5\n\n\n\n\n\n\nsample (1:6, 4, replace=TRUE) \n\n[1] 1 4 2 4\n\n\n\n\n\nmoeda &lt;- sample (c(0,1), 100, replace=TRUE, prob=c(0.3, 0.7)) \n\n\nmoeda\n\n  [1] 1 1 0 0 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 0 0 1 1 1 0 0 1 1 0 1 1 1 1 1 1 1 0\n [38] 1 1 1 1 1 1 0 0 0 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 0 1 1 0 1 1 0 0 1 0 0 1 1\n [75] 1 0 1 0 1 1 1 1 0 1 1 0 0 1 1 0 1 0 1 0 1 1 1 1 1 1"
  },
  {
    "objectID": "j3.2_workspace.html",
    "href": "j3.2_workspace.html",
    "title": "Gestão do Workspace",
    "section": "",
    "text": "Componentes e elementos básicos de uma sessão R\n  \n\n\n\nCriar a pasta do projeto (e.g “Projeto_0”).\nIniciar sessão R.Studio (clicar no ícono), e:\n\n    &gt; clicar \"File\" (na barra de ferramentas principal)    \n        &gt; clicar \"New Project\"\n            &gt; clicar \"Existing Directory\"\n              &gt; [Procurar e selecionar a pasta (e.g.\"Projeto_0\")\\]\n                &gt; clicar \"Create Project\"\n\n\n\n\n\n\nAbrir a pasta do projeto, e:\n\n    &gt; cliclar \"File\" (na barra de ferramentas principal)\n        &gt; clicar no ficheiro \".Rproj\" do projeto (e.g. \"Projeto_0.Rproj\")\n\n\nObter informação sobre a sessaõ ativa:\n\n\nsessionInfo()       \n\n\n\nEspecificar numero de digitos para a sessão:\n\n\noptions(digits=4)\n\n \n\n\n\n\nLocalizar o working directory:\n\n\ngetwd()\n\n\n\nMudar localização do working directory:\n\n\nsetwd (\"/Users/Q/My_R/R_Project1\")     \n\n# R utiliza `/` (*forward slashes*) para designar subdirectorios (diferente a Windows, similar a Mac e Unix)\n\n\n\nListar os ficheiros do working directory:\n\n\nlist.files()\n\n\n\nListar objectos ativos nos workspace:\n\n\nls ( )          # listar os objetos da sessão    \n\nls(pat = \"c\")   # listar objetos que contêm ‘c’ nos seus nomes\n\nls(pat= \"^c\")   #  listar objects que comecem com  ‘c’\n\nls(pos=2)       # Check the contents of the file that has been attached \n\n\n\nRemover objectos ativos:\n\n\nrm(\"var1\" )         # remover objeto \"var1\"\n\nrm(list =ls() ) # remover todos os objetos da sessão\n\nrm(list=setdiff(ls(), \"B\"))   # remover todo menos \"B\"\n\nrm(list=setdiff(ls(), c(\"W\", \"X\")))   # remover todo menos \"W\" e \"X\"\n\n \n \n\n\n\n\nInstalar pacotes externos:\n\n\ninstall.packages (\"PackageName\")\n\n\n\nActivar pacotes já instalados:\n\n\nlibrary (PackageName)       \n                # Or: clicking packages on Window4/ Tab Packages\n                # Or via menu system: Packages&gt;Load Packages    \n\n\n\nCarregar bases internas:\n\n\ndata(aids)    # carregar base ‘aids’ (pacote ‘(KMsurv)’\n\n\n\nFechar um pacote:\n\n\ndetach (\"package:aids\") #detach data\n\n\n\nMais sobre pacotes:\n\n\nsearch ()                      # mostra pacotes abertos\n\nlibrary(help=KMsurv)        # mostra info sobre pacote KMsurv\n\n.libPaths()                 # localização da 'library', the ‘library’ subdirectory of R_HOME.\n\nlibrary ()           # script com  os pacotes instalados e na library (= pestana FILES)\n\n \n\nA qual pacote um certa função?\n\n\npackagename::functionname().\n\n\n\n\n\n?getwd               # information on the “getwd” function \n\n??getwd                # information on the “getwd” function\n\napropos (\"norm\")     # to find all functions in R that contains the string norm type)\n\n \n\n\n\n\nCriar scrip\n\nOpção a:\n\nFile -&gt; New File -&gt; R Script\n\n\nOpção b:\nNa barra de ferramentas da janela SOURCE:\n&gt; + -&gt; R Script\n\nOpção c:\n\nCtrl + Schift + N (Mac) PC? ?? PC?\n\n\n\nGuardar Scripts\n\nOpção a:\n\nFile -&gt; New File -&gt; R Script -&gt; Save/Save as/\n\n\nOpção b:\n\nusar o ícone da janela do script\n\n\n\nAbrir script existente\n\nOpção a:\n\nFile -&gt; Open File -&gt; (search script and open)\n\n\nOpção b:\n\nduplo-click no script, na janela FILES\n\n\n\nExecutar comandos no script\n\n\nsublinhar comando -&gt;Cmd+ENTER (Mac)\n\n\nsublinhar comando -&gt;Ctrl+R (Windows)\n\n \n\n\n\n\nCarregar objetos do ‘working directory’\n\n\n\nload (\"objecto_y\")      \n\nload (\"objectox_yx\")        \n\nload (“Minhabase\")\n\nload (\"WorkspaceProj1\")    \n\n\n\nCarregar objetos de outros diretorios:\n\n\nload (\"~/0R/pastaX//objecto_y\")  \n# se deve especificar a localização\n\n\n\nRecolher a localização de um ficheiro:\n\n\nfile.choose()   \n\n \n\n\n\n\nGuardar objetos no working directory:\n\n\nsave (y, file=\"object_y\")               # Guardar y como \"object_y\"     \n\nsave (y, x, file=\"object_yx\")           # Guardar y and x \n\nsave (minhabase, file=\"Minhabase.RData\")        # Guardar dataframe\n\nsave.image(file=\"WorkspaceProj1\")       # Guardar workspace\n\n\n\nGuardar objetos em outros directorios:\n\n\nsave (AA, file= \"~/0R/objecto_y\")  \n        # objecto_y= objeto R\n        # \"~/0R/objecto_y\"= posição e nome do objeto salvado\n\n\n\nGuardar Gráficos para pdf\n\n\npdf(\"Figura_1.pdf\")     # cria o ficheiro pdf\n\nplot (x)        # gera a figura\n\ndev.off()       # fecha o ficheiro\n\n# http://www.statmethods.net/interface/io.html\n\n\n\nGuardar Gráficos para jpeg:\n\n\npdf(\"Figura_1.jpg\", width = 500, height = 500)      # cria o ficheiro pdf\n\nplot (x)        # gera a figura\n\ndev.off()       # fecha o ficheiro\n\n\n\nGuardar outputs para um ‘text file’\n\n\n\nUsando sink() e imprimendo:\n\n\n# a) Criar o ficheiro\nsink(\"meu_documento.txt\")  \n\n#  b) Especificar um título interno\nprint(\"The mean of var1 x is…\") \n\n# c) produzir os dados (o output será imprimido no .txt, não na CONSOLA)\n    mean (x)\n    plot (x)\n\n# d) Finalizar o procedimento:\n    sink()\n\nb Usando sink() e cat():\n\n# a) Criar o ficheiro    \nsink(\"meu_documento.txt\")\n\n# b) Concatenar    \ncat(\"A média de varX é...\", mean(varX), \"\\n\") \n\n# c) Finalizar o procedimento:\nsink()\n\n\n\nCopy and paste.\n\nUma opção frequente é simplesmente copiar os resultados da CONSOLA ou PLOTS colar num documento Word  \n\n\n\n\nBases Excel:\n\n    &gt; Environment\n        &gt; Import Dataset\n            &gt; From Excel\n\n\nBases SPSS:\n\n    &gt; Environment\n        &gt; Import Dataset\n            &gt; From SPSS\n\n\nBases STATA:\n\n    &gt; Environment\n        &gt; Import Dataset\n            &gt; From STATA\n \n\n\n\n\nPara xlsx\n\n\n\nlibrary (openxlsx)   \nwrite.xlsx(Df, \"Df.xlsx\")\n\n\n\nPara CSV:\n\n\nwrite.table(Df, file=\"Df.csv\",sep=\",\",row.names=F)\n\n\n\nPara SPSS:\n\n\nlibrary(foreign)\nwrite.foreign(mydata, \"c:/mydata.txt\", \"c:/mydata.sps\",   package=\"SPSS\")\n\n\n\nPara SPSS:\n\n\nlibrary(foreign)\nwrite.dta(Df, \"Df.dta\") \n\n \n\n\n\n\nq()"
  },
  {
    "objectID": "j3.2_workspace.html#rproj-o-ficheiro-organizador",
    "href": "j3.2_workspace.html#rproj-o-ficheiro-organizador",
    "title": "Gestão do Workspace",
    "section": "",
    "text": "Criar a pasta do projeto (e.g “Projeto_0”).\nIniciar sessão R.Studio (clicar no ícono), e:\n\n    &gt; clicar \"File\" (na barra de ferramentas principal)    \n        &gt; clicar \"New Project\"\n            &gt; clicar \"Existing Directory\"\n              &gt; [Procurar e selecionar a pasta (e.g.\"Projeto_0\")\\]\n                &gt; clicar \"Create Project\""
  },
  {
    "objectID": "j3.2_workspace.html#iniciar-sessão",
    "href": "j3.2_workspace.html#iniciar-sessão",
    "title": "Gestão do Workspace",
    "section": "",
    "text": "Abrir a pasta do projeto, e:\n\n    &gt; cliclar \"File\" (na barra de ferramentas principal)\n        &gt; clicar no ficheiro \".Rproj\" do projeto (e.g. \"Projeto_0.Rproj\")\n\n\nObter informação sobre a sessaõ ativa:\n\n\nsessionInfo()       \n\n\n\nEspecificar numero de digitos para a sessão:\n\n\noptions(digits=4)"
  },
  {
    "objectID": "j3.2_workspace.html#workspace",
    "href": "j3.2_workspace.html#workspace",
    "title": "Gestão do Workspace",
    "section": "",
    "text": "Localizar o working directory:\n\n\ngetwd()\n\n\n\nMudar localização do working directory:\n\n\nsetwd (\"/Users/Q/My_R/R_Project1\")     \n\n# R utiliza `/` (*forward slashes*) para designar subdirectorios (diferente a Windows, similar a Mac e Unix)\n\n\n\nListar os ficheiros do working directory:\n\n\nlist.files()\n\n\n\nListar objectos ativos nos workspace:\n\n\nls ( )          # listar os objetos da sessão    \n\nls(pat = \"c\")   # listar objetos que contêm ‘c’ nos seus nomes\n\nls(pat= \"^c\")   #  listar objects que comecem com  ‘c’\n\nls(pos=2)       # Check the contents of the file that has been attached \n\n\n\nRemover objectos ativos:\n\n\nrm(\"var1\" )         # remover objeto \"var1\"\n\nrm(list =ls() ) # remover todos os objetos da sessão\n\nrm(list=setdiff(ls(), \"B\"))   # remover todo menos \"B\"\n\nrm(list=setdiff(ls(), c(\"W\", \"X\")))   # remover todo menos \"W\" e \"X\""
  },
  {
    "objectID": "j3.2_workspace.html#pacotes",
    "href": "j3.2_workspace.html#pacotes",
    "title": "Gestão do Workspace",
    "section": "",
    "text": "Instalar pacotes externos:\n\n\ninstall.packages (\"PackageName\")\n\n\n\nActivar pacotes já instalados:\n\n\nlibrary (PackageName)       \n                # Or: clicking packages on Window4/ Tab Packages\n                # Or via menu system: Packages&gt;Load Packages    \n\n\n\nCarregar bases internas:\n\n\ndata(aids)    # carregar base ‘aids’ (pacote ‘(KMsurv)’\n\n\n\nFechar um pacote:\n\n\ndetach (\"package:aids\") #detach data\n\n\n\nMais sobre pacotes:\n\n\nsearch ()                      # mostra pacotes abertos\n\nlibrary(help=KMsurv)        # mostra info sobre pacote KMsurv\n\n.libPaths()                 # localização da 'library', the ‘library’ subdirectory of R_HOME.\n\nlibrary ()           # script com  os pacotes instalados e na library (= pestana FILES)\n\n \n\nA qual pacote um certa função?\n\n\npackagename::functionname()."
  },
  {
    "objectID": "j3.2_workspace.html#ajudas",
    "href": "j3.2_workspace.html#ajudas",
    "title": "Gestão do Workspace",
    "section": "",
    "text": "?getwd               # information on the “getwd” function \n\n??getwd                # information on the “getwd” function\n\napropos (\"norm\")     # to find all functions in R that contains the string norm type)"
  },
  {
    "objectID": "j3.2_workspace.html#scripts",
    "href": "j3.2_workspace.html#scripts",
    "title": "Gestão do Workspace",
    "section": "",
    "text": "Criar scrip\n\nOpção a:\n\nFile -&gt; New File -&gt; R Script\n\n\nOpção b:\nNa barra de ferramentas da janela SOURCE:\n&gt; + -&gt; R Script\n\nOpção c:\n\nCtrl + Schift + N (Mac) PC? ?? PC?\n\n\n\nGuardar Scripts\n\nOpção a:\n\nFile -&gt; New File -&gt; R Script -&gt; Save/Save as/\n\n\nOpção b:\n\nusar o ícone da janela do script\n\n\n\nAbrir script existente\n\nOpção a:\n\nFile -&gt; Open File -&gt; (search script and open)\n\n\nOpção b:\n\nduplo-click no script, na janela FILES\n\n\n\nExecutar comandos no script\n\n\nsublinhar comando -&gt;Cmd+ENTER (Mac)\n\n\nsublinhar comando -&gt;Ctrl+R (Windows)"
  },
  {
    "objectID": "j3.2_workspace.html#carregar-objetos",
    "href": "j3.2_workspace.html#carregar-objetos",
    "title": "Gestão do Workspace",
    "section": "",
    "text": "Carregar objetos do ‘working directory’\n\n\n\nload (\"objecto_y\")      \n\nload (\"objectox_yx\")        \n\nload (“Minhabase\")\n\nload (\"WorkspaceProj1\")    \n\n\n\nCarregar objetos de outros diretorios:\n\n\nload (\"~/0R/pastaX//objecto_y\")  \n# se deve especificar a localização\n\n\n\nRecolher a localização de um ficheiro:\n\n\nfile.choose()"
  },
  {
    "objectID": "j3.2_workspace.html#guardar-objetos",
    "href": "j3.2_workspace.html#guardar-objetos",
    "title": "Gestão do Workspace",
    "section": "",
    "text": "Guardar objetos no working directory:\n\n\nsave (y, file=\"object_y\")               # Guardar y como \"object_y\"     \n\nsave (y, x, file=\"object_yx\")           # Guardar y and x \n\nsave (minhabase, file=\"Minhabase.RData\")        # Guardar dataframe\n\nsave.image(file=\"WorkspaceProj1\")       # Guardar workspace\n\n\n\nGuardar objetos em outros directorios:\n\n\nsave (AA, file= \"~/0R/objecto_y\")  \n        # objecto_y= objeto R\n        # \"~/0R/objecto_y\"= posição e nome do objeto salvado\n\n\n\nGuardar Gráficos para pdf\n\n\npdf(\"Figura_1.pdf\")     # cria o ficheiro pdf\n\nplot (x)        # gera a figura\n\ndev.off()       # fecha o ficheiro\n\n# http://www.statmethods.net/interface/io.html\n\n\n\nGuardar Gráficos para jpeg:\n\n\npdf(\"Figura_1.jpg\", width = 500, height = 500)      # cria o ficheiro pdf\n\nplot (x)        # gera a figura\n\ndev.off()       # fecha o ficheiro\n\n\n\nGuardar outputs para um ‘text file’\n\n\n\nUsando sink() e imprimendo:\n\n\n# a) Criar o ficheiro\nsink(\"meu_documento.txt\")  \n\n#  b) Especificar um título interno\nprint(\"The mean of var1 x is…\") \n\n# c) produzir os dados (o output será imprimido no .txt, não na CONSOLA)\n    mean (x)\n    plot (x)\n\n# d) Finalizar o procedimento:\n    sink()\n\nb Usando sink() e cat():\n\n# a) Criar o ficheiro    \nsink(\"meu_documento.txt\")\n\n# b) Concatenar    \ncat(\"A média de varX é...\", mean(varX), \"\\n\") \n\n# c) Finalizar o procedimento:\nsink()\n\n\n\nCopy and paste.\n\nUma opção frequente é simplesmente copiar os resultados da CONSOLA ou PLOTS colar num documento Word"
  },
  {
    "objectID": "j3.2_workspace.html#importar-bases",
    "href": "j3.2_workspace.html#importar-bases",
    "title": "Gestão do Workspace",
    "section": "",
    "text": "Bases Excel:\n\n    &gt; Environment\n        &gt; Import Dataset\n            &gt; From Excel\n\n\nBases SPSS:\n\n    &gt; Environment\n        &gt; Import Dataset\n            &gt; From SPSS\n\n\nBases STATA:\n\n    &gt; Environment\n        &gt; Import Dataset\n            &gt; From STATA"
  },
  {
    "objectID": "j3.2_workspace.html#exportar-bases",
    "href": "j3.2_workspace.html#exportar-bases",
    "title": "Gestão do Workspace",
    "section": "",
    "text": "Para xlsx\n\n\n\nlibrary (openxlsx)   \nwrite.xlsx(Df, \"Df.xlsx\")\n\n\n\nPara CSV:\n\n\nwrite.table(Df, file=\"Df.csv\",sep=\",\",row.names=F)\n\n\n\nPara SPSS:\n\n\nlibrary(foreign)\nwrite.foreign(mydata, \"c:/mydata.txt\", \"c:/mydata.sps\",   package=\"SPSS\")\n\n\n\nPara SPSS:\n\n\nlibrary(foreign)\nwrite.dta(Df, \"Df.dta\")"
  },
  {
    "objectID": "j3.2_workspace.html#fechar-sessão",
    "href": "j3.2_workspace.html#fechar-sessão",
    "title": "Gestão do Workspace",
    "section": "",
    "text": "q()"
  },
  {
    "objectID": "j3.4_dataframes.html",
    "href": "j3.4_dataframes.html",
    "title": "Dataframes",
    "section": "",
    "text": "Standard data.frame\n\n\nDf &lt;-data.frame (\n            id = c(1, 1, 2, 3, 3, 5),\n            cigarros = c(15,15, 19, 14, 12, 15),\n            sexo = c(0, 0, 1, 1, 0,0),\n            cidade = c(\"Lisboa\",\"Lisboa\", \"Lisboa\", \"Porto\", \"Lisboa\", \"Portimão\"),\n            grupo = c(\"A\",\"A\", \"C\", \"C\", \"B\", \"B\"),\n            stress = c (4,4,4,2,1,39))\n\n \n\ntibble dataset\n\n\ntibble (\n            id = c(1, 2, 3, 3, 5),\n            cigarros = c(15, 19, 14, 12, 15),\n            sexo = c(0, 1, 1, 0,0),\n            cidade = c(\"Lisboa\", \"Lisboa\", \"Porto\", \"Lisboa\", \"Portimão\"),\n            grupo = c(\"A\", \"C\", \"C\", \"B\", \"B\"),\n            stress = c (4,4,2,1,39)\n)\n\ntibble allows names not valid for dataframes\n\nlibrary (tidyverse)\n\ntibble (\n        `:)`  = \"smile\",\n        ` `   = \"space\",\n        `2000`= \"number\"\n)\n\nother way, with tribble\n\ntribble(\n    ~x, ~y, ~z,\n  #--/--/----\n  \"a\", 2, 3.6,\n  \"b\", 1, 8.5\n)\n\n \n\n\n\n\nclass (Df)          # classe\n\nnrow (Df)           # número de linhas     \n\nncol (Df)           # número de colunas    \n\ndim(Df)             # dimensão (linhas & colunas)   \n\nnames (Df)          # nome das variáveis      \n\nhead (Df, 3)        # Primeiras  observações       \n\ntail (Df, 2)          # Ultimas observações    \n\nstr (Df)            # Estrutura da base     \n\nobject.size(Df)     # tamanho em bytes\n\nsummary(Df)           # Sumário para cada variável     \n\n \n\n\n\n\n\n\nDf[duplicated(Df), ]\n\n  id cigarros sexo cidade grupo stress\n2  1       15    0 Lisboa     A      4\n\n\n\n\n\n\n\ndetectar:\n\n\ntmm &lt;- table (Df$id)   ; tmm &lt;- as.data.frame(tmm)\n\nNcases &lt;-max(tmm$Freq)\nifelse (Ncases==1, \"OK, no double id\", \"Double id detected, clicar abaixo.\")\n\n[1] \"Double id detected, clicar abaixo.\"\n\n\n\n\nvisualizar:\n\n\nqqq &lt;- Df$id[tmm$Freq&gt;1]\nDf[which(Df$id==qqq),]\n\n  id cigarros sexo cidade grupo stress\n1  1       15    0 Lisboa     A      4\n\n\n \n\n\n\n\n\n\n\nDf$var6 &lt;- 1                \n\nDf$var7 &lt;- Df$var6 + Df$stress  \n\nDf$idade &lt;- c(21,21,32,13,54,15)        \n\nDf\n\n  id cigarros sexo   cidade grupo stress var6 var7 idade\n1  1       15    0   Lisboa     A      4    1    5    21\n2  1       15    0   Lisboa     A      4    1    5    21\n3  2       19    1   Lisboa     C      4    1    5    32\n4  3       14    1    Porto     C      2    1    3    13\n5  3       12    0   Lisboa     B      1    1    2    54\n6  5       15    0 Portimão     B     39    1   40    15\n\n\n\n\nDf$bigcity &lt;- Df$cidade %in% c(\"Lisboa\", \"Porto\")\n\nDf[, c(\"id\",\"cidade\", \"bigcity\")]\n\n  id   cidade bigcity\n1  1   Lisboa    TRUE\n2  1   Lisboa    TRUE\n3  2   Lisboa    TRUE\n4  3    Porto    TRUE\n5  3   Lisboa    TRUE\n6  5 Portimão   FALSE\n\n\n\n\n\n\nDf$id3  &lt;-  1: nrow(Df) \n\nDf$idl &lt;- letters [1:nrow(Df)]   # with letters\n\nDf\n\n  id cigarros sexo   cidade grupo stress var6 var7 idade bigcity id3 idl\n1  1       15    0   Lisboa     A      4    1    5    21    TRUE   1   a\n2  1       15    0   Lisboa     A      4    1    5    21    TRUE   2   b\n3  2       19    1   Lisboa     C      4    1    5    32    TRUE   3   c\n4  3       14    1    Porto     C      2    1    3    13    TRUE   4   d\n5  3       12    0   Lisboa     B      1    1    2    54    TRUE   5   e\n6  5       15    0 Portimão     B     39    1   40    15   FALSE   6   f\n\n\n\n\n\n\n(várias maneiras)\n\n\n\nDf$id_spell_sex &lt;- with(Df, ave(rep(1, nrow(Df)), sexo, FUN = seq_along))\n\nDf[order(Df$sexo), c(\"id\",\"sexo\", \"id_spell_sex\")]\n\n  id sexo id_spell_sex\n1  1    0            1\n2  1    0            2\n5  3    0            3\n6  5    0            4\n3  2    1            1\n4  3    1            2\n\n\n\n\n\n\n\n\nlibrary(dplyr)\n\nDf &lt;-Df %&gt;% group_by(cidade) %&gt;% mutate(id_spell_cidade = row_number(cidade))\n\nDf[order(Df$cidade), c(\"id\",\"cidade\", \"id_spell_cidade\")]\n\n \n\n\n\n\n\n\nVárias opções:\n\nDf$stress       &lt;- NULL\n\nS[4]    &lt;- NULL     \n\nS [\"stress\"]    &lt;- NULL  \n\n\nS &lt;- S[,-4]     \n\n\n\n\n\n\nS&lt;-S[-39,]      # elimina row 39 \n\n \n\n\n\n\n\n\n\nnames (S) &lt;- c(\"Q1\", \"Q2\", \"Q3\")   # list in ORDER ALL the vars of S\n\n\n\n\n\n\nnames(S)[3] &lt;- \"Country\"    \n\n\n\n\n\n\nnames(Df) [names(Df)==\"cigarros\"] &lt;- \"cig\"  \n\n\n\n\n\n\nlibrary(reshape)    \n\nrename(Df, c(var1=\"x1\"))    \n\n\n\n\n\n \n\n\n\n\n\n\n\ndata &lt;- data[,c(1:3,5,4)]\n\n\n\n\n\n\nnames &lt;- c(\"v1\", \"v2\", \"v3\", \"v5\", \"v4\") \ndata &lt;- data[names]\n\n \n\n\n\n\n\nDf [order(Df$cigarros),]                    # ordenar Df por cigarros\n\nDf [order(Df$cigarros, Df$stress),]     #... por cigarros e stress\n\nDf [order(Df$cigarros, -Df$stress),]    #... por cig (asc) e stress\n\nDf [order(Df$cigarros, -Df$stress),]      #...por cig (asc.) e stress (desc.)\n\n\n\n\n \n\n\n\n\n\n\n\nrownames (Df)                 \n\n\n\n\n\n\nrownames (Df)  &lt;- 1:5\n\n\n\n\n\n\nrow.names(Df) &lt;- NULL \n\n \n\n\n\n\n\n\n\nDf[c(\"sexo\", \"cidade\")]     #subset including sexo, cidade\nDf[c( 3,4)]             #idem\n\nDf[c(-1, -3)]           #subset excluindo v1,v3\nDf[- c(1, 3)]           #idem\n\n\n\n\n\n\nDf [1  , ]      # linha 1       , colunas todas\n\nDf [ ,3 ]        # linhas todas, coluna 3\n\nDf [1  ,3 ]         #  linha 1      , coluna 3\n\nDf [1:4, ]  # linhas 1 a 4  , colunas todas\n\nDf [ , 2:5]     # linhas todas  , colunas 2 a 5\n\nDf [c(1,2,3,4), c(2,3,4,5)]\n\nDf [  ,-c(1,2)]  # linhas todas, colunas todas menos 1 e 2\n\n \n\n\n\n\nDf [which(Df$cidade == \"Lisboa\") , ]\n\nDf [  , c(\"cidade\", \"cigarros\", \"sexo\") ]\n\nDf [which(Df$cidade == \"Lisboa\"), c(\"cidade\", \"cigarros\", \"sexo\") ]\n\n\n\n\n\n\nsubset (Df, cidade &lt;= \"Lisboa\",   select=c(cidade, cigarros, sexo)) \n\n  cidade cigarros sexo\n1 Lisboa       15    0\n2 Lisboa       15    0\n3 Lisboa       19    1\n5 Lisboa       12    0\n\n\n\n\n\n\n \n\n\n\n\n\n\n\ntotal &lt;- merge(dataframeA, dataframeB, by=\"id\")\n\n\nall.x\n\n\ntotal &lt;- merge(dataframeX, dataframeY, by=\"id\", all.x=TRUE )\n\nLinhas extras serão adicionadas, uma para cada linha em x que não tenha nenhuma linha correspondente em y. \n\nall.y\n\n\ntotal &lt;- merge(dataframeX, dataframeY, by=\"id\", all.y=TRUE )\n\nLinhas extras serão adicionadas, uma para cada linha em y que não tenha nenhuma linha correspondente em x. \n\nall\n\n\ntotal &lt;- merge(dataframeA, dataframeB, by=\"id\", all=TRUE )\n\n\n\n\n\n\nOpção basica\n\n\nmytempdata = merge(myDf, mydata2)(mytempdata = merge(mytempdata, mydata3)(.((mytempdata = merge(mytempdata, mydata20)\n\n\n\ncom função\n\n\nmultmerge = function(mypath){\nfilenames=list.files(path=mypath, full.names=TRUE)\ndatalist = lapply(filenames, function(x){read.csv(file=x,header=T)})\nReduce(function(x,y) {merge(x,y)}, datalist)\n\n\n\ncom inner_join -pacote dplyr\n\n\nlibrary(dplyr)\ndf &lt;- inner_join(df1, df2)\ndf &lt;- inner_join(df, df3)\n\n\n\n\n\nUsar rbind() para integrar dataframes verticalmente\n\ntotal &lt;- rbind(data frameA, data frameB)\n\nOs bases de dados devem ter as mesmas variáveis, mas não precisam estar na mesma ordem.\nSe a base A tiver variáveis que a base B não tem, então:\na) Exclua as variáveis extras na base A; ou.\nb). Crie as variáveis adicionais na base B e defina-as como NA antes de integra-las.\n\n\n\n\n\ncbind ???\n\n \n\n\n\n\n(mais info aqui)\nOs dados são considerados como:\n- formato wide (uma linha por sujeito) quando há uma linha de observação por sujeito com cada medição presente como uma variável diferente e\n- Formato long (várias linhas por sujeito) quando há uma linha de observação por medição.\n\n\n\n\nlibrary (reshape2)\n\ndata_wide &lt;- dcast(Df,   port_field + port_ch ~ port_spell_matrix, value.var=\"port_field\")\nView(data_wide2)"
  },
  {
    "objectID": "j3.4_dataframes.html#criação",
    "href": "j3.4_dataframes.html#criação",
    "title": "Dataframes",
    "section": "",
    "text": "Standard data.frame\n\n\nDf &lt;-data.frame (\n            id = c(1, 1, 2, 3, 3, 5),\n            cigarros = c(15,15, 19, 14, 12, 15),\n            sexo = c(0, 0, 1, 1, 0,0),\n            cidade = c(\"Lisboa\",\"Lisboa\", \"Lisboa\", \"Porto\", \"Lisboa\", \"Portimão\"),\n            grupo = c(\"A\",\"A\", \"C\", \"C\", \"B\", \"B\"),\n            stress = c (4,4,4,2,1,39))\n\n \n\ntibble dataset\n\n\ntibble (\n            id = c(1, 2, 3, 3, 5),\n            cigarros = c(15, 19, 14, 12, 15),\n            sexo = c(0, 1, 1, 0,0),\n            cidade = c(\"Lisboa\", \"Lisboa\", \"Porto\", \"Lisboa\", \"Portimão\"),\n            grupo = c(\"A\", \"C\", \"C\", \"B\", \"B\"),\n            stress = c (4,4,2,1,39)\n)\n\ntibble allows names not valid for dataframes\n\nlibrary (tidyverse)\n\ntibble (\n        `:)`  = \"smile\",\n        ` `   = \"space\",\n        `2000`= \"number\"\n)\n\nother way, with tribble\n\ntribble(\n    ~x, ~y, ~z,\n  #--/--/----\n  \"a\", 2, 3.6,\n  \"b\", 1, 8.5\n)"
  },
  {
    "objectID": "j3.4_dataframes.html#exploração",
    "href": "j3.4_dataframes.html#exploração",
    "title": "Dataframes",
    "section": "",
    "text": "class (Df)          # classe\n\nnrow (Df)           # número de linhas     \n\nncol (Df)           # número de colunas    \n\ndim(Df)             # dimensão (linhas & colunas)   \n\nnames (Df)          # nome das variáveis      \n\nhead (Df, 3)        # Primeiras  observações       \n\ntail (Df, 2)          # Ultimas observações    \n\nstr (Df)            # Estrutura da base     \n\nobject.size(Df)     # tamanho em bytes\n\nsummary(Df)           # Sumário para cada variável"
  },
  {
    "objectID": "j3.4_dataframes.html#duplicados",
    "href": "j3.4_dataframes.html#duplicados",
    "title": "Dataframes",
    "section": "",
    "text": "Df[duplicated(Df), ]\n\n  id cigarros sexo cidade grupo stress\n2  1       15    0 Lisboa     A      4\n\n\n\n\n\n\n\ndetectar:\n\n\ntmm &lt;- table (Df$id)   ; tmm &lt;- as.data.frame(tmm)\n\nNcases &lt;-max(tmm$Freq)\nifelse (Ncases==1, \"OK, no double id\", \"Double id detected, clicar abaixo.\")\n\n[1] \"Double id detected, clicar abaixo.\"\n\n\n\n\nvisualizar:\n\n\nqqq &lt;- Df$id[tmm$Freq&gt;1]\nDf[which(Df$id==qqq),]\n\n  id cigarros sexo cidade grupo stress\n1  1       15    0 Lisboa     A      4"
  },
  {
    "objectID": "j3.4_dataframes.html#criação-de-variáveis",
    "href": "j3.4_dataframes.html#criação-de-variáveis",
    "title": "Dataframes",
    "section": "",
    "text": "Df$var6 &lt;- 1                \n\nDf$var7 &lt;- Df$var6 + Df$stress  \n\nDf$idade &lt;- c(21,21,32,13,54,15)        \n\nDf\n\n  id cigarros sexo   cidade grupo stress var6 var7 idade\n1  1       15    0   Lisboa     A      4    1    5    21\n2  1       15    0   Lisboa     A      4    1    5    21\n3  2       19    1   Lisboa     C      4    1    5    32\n4  3       14    1    Porto     C      2    1    3    13\n5  3       12    0   Lisboa     B      1    1    2    54\n6  5       15    0 Portimão     B     39    1   40    15\n\n\n\n\nDf$bigcity &lt;- Df$cidade %in% c(\"Lisboa\", \"Porto\")\n\nDf[, c(\"id\",\"cidade\", \"bigcity\")]\n\n  id   cidade bigcity\n1  1   Lisboa    TRUE\n2  1   Lisboa    TRUE\n3  2   Lisboa    TRUE\n4  3    Porto    TRUE\n5  3   Lisboa    TRUE\n6  5 Portimão   FALSE\n\n\n\n\n\n\nDf$id3  &lt;-  1: nrow(Df) \n\nDf$idl &lt;- letters [1:nrow(Df)]   # with letters\n\nDf\n\n  id cigarros sexo   cidade grupo stress var6 var7 idade bigcity id3 idl\n1  1       15    0   Lisboa     A      4    1    5    21    TRUE   1   a\n2  1       15    0   Lisboa     A      4    1    5    21    TRUE   2   b\n3  2       19    1   Lisboa     C      4    1    5    32    TRUE   3   c\n4  3       14    1    Porto     C      2    1    3    13    TRUE   4   d\n5  3       12    0   Lisboa     B      1    1    2    54    TRUE   5   e\n6  5       15    0 Portimão     B     39    1   40    15   FALSE   6   f\n\n\n\n\n\n\n(várias maneiras)\n\n\n\nDf$id_spell_sex &lt;- with(Df, ave(rep(1, nrow(Df)), sexo, FUN = seq_along))\n\nDf[order(Df$sexo), c(\"id\",\"sexo\", \"id_spell_sex\")]\n\n  id sexo id_spell_sex\n1  1    0            1\n2  1    0            2\n5  3    0            3\n6  5    0            4\n3  2    1            1\n4  3    1            2\n\n\n\n\n\n\n\n\nlibrary(dplyr)\n\nDf &lt;-Df %&gt;% group_by(cidade) %&gt;% mutate(id_spell_cidade = row_number(cidade))\n\nDf[order(Df$cidade), c(\"id\",\"cidade\", \"id_spell_cidade\")]"
  },
  {
    "objectID": "j3.4_dataframes.html#eliminar-variáveis-e-observações",
    "href": "j3.4_dataframes.html#eliminar-variáveis-e-observações",
    "title": "Dataframes",
    "section": "",
    "text": "Várias opções:\n\nDf$stress       &lt;- NULL\n\nS[4]    &lt;- NULL     \n\nS [\"stress\"]    &lt;- NULL  \n\n\nS &lt;- S[,-4]     \n\n\n\n\n\n\nS&lt;-S[-39,]      # elimina row 39"
  },
  {
    "objectID": "j3.4_dataframes.html#mudar-nome-de-variáveis",
    "href": "j3.4_dataframes.html#mudar-nome-de-variáveis",
    "title": "Dataframes",
    "section": "",
    "text": "names (S) &lt;- c(\"Q1\", \"Q2\", \"Q3\")   # list in ORDER ALL the vars of S\n\n\n\n\n\n\nnames(S)[3] &lt;- \"Country\"    \n\n\n\n\n\n\nnames(Df) [names(Df)==\"cigarros\"] &lt;- \"cig\"  \n\n\n\n\n\n\nlibrary(reshape)    \n\nrename(Df, c(var1=\"x1\"))"
  },
  {
    "objectID": "j3.4_dataframes.html#reordenar-variáveis",
    "href": "j3.4_dataframes.html#reordenar-variáveis",
    "title": "Dataframes",
    "section": "",
    "text": "data &lt;- data[,c(1:3,5,4)]\n\n\n\n\n\n\nnames &lt;- c(\"v1\", \"v2\", \"v3\", \"v5\", \"v4\") \ndata &lt;- data[names]"
  },
  {
    "objectID": "j3.4_dataframes.html#ordenar-a-base",
    "href": "j3.4_dataframes.html#ordenar-a-base",
    "title": "Dataframes",
    "section": "",
    "text": "Df [order(Df$cigarros),]                    # ordenar Df por cigarros\n\nDf [order(Df$cigarros, Df$stress),]     #... por cigarros e stress\n\nDf [order(Df$cigarros, -Df$stress),]    #... por cig (asc) e stress\n\nDf [order(Df$cigarros, -Df$stress),]      #...por cig (asc.) e stress (desc.)"
  },
  {
    "objectID": "j3.4_dataframes.html#rownames",
    "href": "j3.4_dataframes.html#rownames",
    "title": "Dataframes",
    "section": "",
    "text": "rownames (Df)                 \n\n\n\n\n\n\nrownames (Df)  &lt;- 1:5\n\n\n\n\n\n\nrow.names(Df) &lt;- NULL"
  },
  {
    "objectID": "j3.4_dataframes.html#subsetting",
    "href": "j3.4_dataframes.html#subsetting",
    "title": "Dataframes",
    "section": "",
    "text": "Df[c(\"sexo\", \"cidade\")]     #subset including sexo, cidade\nDf[c( 3,4)]             #idem\n\nDf[c(-1, -3)]           #subset excluindo v1,v3\nDf[- c(1, 3)]           #idem\n\n\n\n\n\n\nDf [1  , ]      # linha 1       , colunas todas\n\nDf [ ,3 ]        # linhas todas, coluna 3\n\nDf [1  ,3 ]         #  linha 1      , coluna 3\n\nDf [1:4, ]  # linhas 1 a 4  , colunas todas\n\nDf [ , 2:5]     # linhas todas  , colunas 2 a 5\n\nDf [c(1,2,3,4), c(2,3,4,5)]\n\nDf [  ,-c(1,2)]  # linhas todas, colunas todas menos 1 e 2\n\n \n\n\n\n\nDf [which(Df$cidade == \"Lisboa\") , ]\n\nDf [  , c(\"cidade\", \"cigarros\", \"sexo\") ]\n\nDf [which(Df$cidade == \"Lisboa\"), c(\"cidade\", \"cigarros\", \"sexo\") ]\n\n\n\n\n\n\nsubset (Df, cidade &lt;= \"Lisboa\",   select=c(cidade, cigarros, sexo)) \n\n  cidade cigarros sexo\n1 Lisboa       15    0\n2 Lisboa       15    0\n3 Lisboa       19    1\n5 Lisboa       12    0"
  },
  {
    "objectID": "j3.4_dataframes.html#merge",
    "href": "j3.4_dataframes.html#merge",
    "title": "Dataframes",
    "section": "",
    "text": "total &lt;- merge(dataframeA, dataframeB, by=\"id\")\n\n\nall.x\n\n\ntotal &lt;- merge(dataframeX, dataframeY, by=\"id\", all.x=TRUE )\n\nLinhas extras serão adicionadas, uma para cada linha em x que não tenha nenhuma linha correspondente em y. \n\nall.y\n\n\ntotal &lt;- merge(dataframeX, dataframeY, by=\"id\", all.y=TRUE )\n\nLinhas extras serão adicionadas, uma para cada linha em y que não tenha nenhuma linha correspondente em x. \n\nall\n\n\ntotal &lt;- merge(dataframeA, dataframeB, by=\"id\", all=TRUE )\n\n\n\n\n\n\nOpção basica\n\n\nmytempdata = merge(myDf, mydata2)(mytempdata = merge(mytempdata, mydata3)(.((mytempdata = merge(mytempdata, mydata20)\n\n\n\ncom função\n\n\nmultmerge = function(mypath){\nfilenames=list.files(path=mypath, full.names=TRUE)\ndatalist = lapply(filenames, function(x){read.csv(file=x,header=T)})\nReduce(function(x,y) {merge(x,y)}, datalist)\n\n\n\ncom inner_join -pacote dplyr\n\n\nlibrary(dplyr)\ndf &lt;- inner_join(df1, df2)\ndf &lt;- inner_join(df, df3)\n\n\n\n\n\nUsar rbind() para integrar dataframes verticalmente\n\ntotal &lt;- rbind(data frameA, data frameB)\n\nOs bases de dados devem ter as mesmas variáveis, mas não precisam estar na mesma ordem.\nSe a base A tiver variáveis que a base B não tem, então:\na) Exclua as variáveis extras na base A; ou.\nb). Crie as variáveis adicionais na base B e defina-as como NA antes de integra-las.\n\n\n\n\n\ncbind ???"
  },
  {
    "objectID": "j3.4_dataframes.html#reshape",
    "href": "j3.4_dataframes.html#reshape",
    "title": "Dataframes",
    "section": "",
    "text": "(mais info aqui)\nOs dados são considerados como:\n- formato wide (uma linha por sujeito) quando há uma linha de observação por sujeito com cada medição presente como uma variável diferente e\n- Formato long (várias linhas por sujeito) quando há uma linha de observação por medição.\n\n\n\n\nlibrary (reshape2)\n\ndata_wide &lt;- dcast(Df,   port_field + port_ch ~ port_spell_matrix, value.var=\"port_field\")\nView(data_wide2)"
  },
  {
    "objectID": "j3.0.1_pacotes.html",
    "href": "j3.0.1_pacotes.html",
    "title": "Pacotes",
    "section": "",
    "text": "Aceder ao sítio cran.r-project.org\n\nClicar em\n\nDownload R for macOS or\n\nDescarregue a versão mais recente da GUI do R em (ficheiro .pkg) em “Latest release”. Pode descarregar versões muito mais antigas seguindo as ligações “old directory” ou “CRAN archive”.\nExecute o ficheiro .pkg e siga as instruções de instalação.\n\nDownload R for Windows\n\nClicar na ligação “install R for the first time” para transferir o ficheiro executável (.exe) do R.\nExecute o ficheiro executável do R para iniciar a instalação e permita que a aplicação faça alterações no seu dispositivo.\nSeleccione o idioma de instalação.\nSiga as instruções de instalação.\n\n\n\n\n\n\n\n\n\nAceder ao sitio do RStudio.\nClicar em “DOWNLOAD” no canto superior direito.\nClicar em “DOWNLOAD” sob a “RStudio Free Source License”.\nDescarregar o RStudio Desktop recomendado para o seu computador.\nExecute\n\no ficheiro RStudio Executable (.exe) para Windows ou\no ficheiro Apple Image Disk (.dmg) para macOS X."
  },
  {
    "objectID": "j3.0.1_pacotes.html#instalação-do-r",
    "href": "j3.0.1_pacotes.html#instalação-do-r",
    "title": "Pacotes",
    "section": "",
    "text": "Aceder ao sítio cran.r-project.org\n\nClicar em\n\nDownload R for macOS or\n\nDescarregue a versão mais recente da GUI do R em (ficheiro .pkg) em “Latest release”. Pode descarregar versões muito mais antigas seguindo as ligações “old directory” ou “CRAN archive”.\nExecute o ficheiro .pkg e siga as instruções de instalação.\n\nDownload R for Windows\n\nClicar na ligação “install R for the first time” para transferir o ficheiro executável (.exe) do R.\nExecute o ficheiro executável do R para iniciar a instalação e permita que a aplicação faça alterações no seu dispositivo.\nSeleccione o idioma de instalação.\nSiga as instruções de instalação."
  },
  {
    "objectID": "j3.0.1_pacotes.html#instalação-do-r.studio",
    "href": "j3.0.1_pacotes.html#instalação-do-r.studio",
    "title": "Pacotes",
    "section": "",
    "text": "Aceder ao sitio do RStudio.\nClicar em “DOWNLOAD” no canto superior direito.\nClicar em “DOWNLOAD” sob a “RStudio Free Source License”.\nDescarregar o RStudio Desktop recomendado para o seu computador.\nExecute\n\no ficheiro RStudio Executable (.exe) para Windows ou\no ficheiro Apple Image Disk (.dmg) para macOS X."
  },
  {
    "objectID": "j3.4_tidyverse.html",
    "href": "j3.4_tidyverse.html",
    "title": "TIDYVERSE",
    "section": "",
    "text": "library(dplyr)\n\nMine 2024_ cpa TRANSFORM\n\n# install.packages(\"nycflights13\")\nlibrary(nycflights13)\nlibrary(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──\n\n\n✔ ggplot2 3.3.5     ✔ purrr   0.3.4\n✔ tibble  3.1.6     ✔ stringr 1.4.0\n✔ tidyr   1.2.0     ✔ forcats 0.5.1\n✔ readr   2.1.2     \n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\n\n\n\n\n\n\n\n\nall flights that departed more than 120 minutes (two hours) late:\n\n\nflights |&gt; \n  filter(dep_delay &gt; 120)\n\n\nFlights that departed on January 1\n\n\nflights |&gt; \n  filter(month == 1 & day == 1)\n\n\nFlights that departed in January or February\n\n\nflights |&gt; \n  filter(month == 1 | month == 2)\n\n\n\n\nA shorter way to select flights that departed in January or February\n\n\nflights |&gt; \n  filter(month %in% c(1, 2))\n\n\n\n\n\n\norder of the rows based on the value of the columns.\n\nflights |&gt; \n  arrange(year, month, day, dep_time)\n\n\n\n\nflights |&gt; \n  arrange(desc(dep_delay))\n\n\n\n\n\n\nRemove duplicate rows, if any\n\nflights |&gt;  \n  distinct()\n\nFind all unique origin and destination pairs\n\nflights |&gt; \n  distinct(origin, dest)\n\n\nto the keep other columns when filtering for unique rows, use the .keep_all = TRUE option.\n\n\nflights |&gt; \n  distinct(origin, dest, .keep_all = TRUE)\n\n\n\nTo find the number of occurrences instead, you’re better off swapping distinct() for count(), and with the sort = TRUE argument you can arrange them in descending order of number of occurrences.\n\n\nflights |&gt;\n  count(origin, dest, sort = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nflights |&gt; \n  mutate(\n    gain = dep_delay - arr_delay,\n    speed = distance / air_time * 60\n  )\n\nBy default, mutate() adds new columns on the right hand side of your dataset,\n\n.before argument to add the variables to the left hand side:\n\n\nflights |&gt; \n  mutate(\n    gain = dep_delay - arr_delay,\n    speed = distance / air_time * 60,\n    .before = 1                           # 1 is the position\n  )\n\n\nuse the variable name instead of a position in both .before and .after\n\n\nflights |&gt; \n  mutate(\n    gain = dep_delay - arr_delay,\n    speed = distance / air_time * 60,\n    .after = day                       # variable name instead of position\n  )\n\n\n\nused specifies that we only keep the columns that were involved or created in the mutate() step.\n\nflights |&gt; \n  mutate(\n    gain = dep_delay - arr_delay,\n    hours = air_time / 60,\n    gain_per_hour = gain / hours,\n    .keep = \"used\"\n  )\n\n\n\n\n\n\n\nSelect columns by name:\n\n\nflights |&gt; \n  select(year, month, day)\n\n\nSelect all columns between year and day (inclusive):\n\n\nflights |&gt; \n  select(year:day)\n\n\nSelect all columns except those from year to day (inclusive):\n\n\nflights |&gt; \n  select(!year:day)\n\n\nSelect all columns that are characters:\n\n\nflights |&gt; \n  select(where(is.character))\n\nThere are a number of helper functions you can use within select(): - starts_with(“abc”) : matches names that begin with “abc”.\n- ends_with(“xyz”) : matches names that end with “xyz”.\n- contains(“ijk”) : matches names that contain “ijk”.\n- num_range(“x”, 1:3) : matches x1, x2 and x3.\n\n\nrename variables as you select() them by using =. The new name appears on the left hand side of the =, the old variable appears on the right hand side:\n\n\nflights |&gt; \n  select(tail_num = tailnum)\n\n\n\n\n\n\nto keep all the existing variables and just want to rename a few, you can use rename() instead of select():\n\n\nflights |&gt; \n  rename(tail_num = tailnum)\n\n\nIf you have a bunch of inconsistently named columns and it would be painful to fix them all by hand, check out janitor::clean_names() which provides some useful automated cleaning.\n\n\n\n\n\n\nto move variables around. You might want to collect related variables together or move important variables to the front.\n\nBy default relocate() moves variables to the front:\n\n\nflights |&gt; \n  relocate(time_hour, air_time)\n\n_ To specify where to put them use the .before and .after arguments, just like in mutate():\n\nflights |&gt; \n  relocate(year:dep_time, .after = time_hour)\n\n\nflights |&gt; \n  relocate(starts_with(\"arr\"), .before = dep_time)\n\n\n\n\n\n\n\n\n\n\n\n\n\nits real power arises when you start to combine multiple verbs.\n\nyou wanted to find the fast flights to Houston’s IAH airport: you need to combine filter(), mutate(), select(), and arrange():\n\n\nflights |&gt; \n  filter(dest == \"IAH\") |&gt; \n  mutate(speed = distance / air_time * 60) |&gt; \n  select(year:day, dep_time, carrier, flight, speed) |&gt; \n  arrange(desc(speed))\n\nEven though this pipeline has four steps, it’s easy to skim because the verbs come at the start of each line: start with the flights data, then filter, then mutate, then select, then arrange.\nWhat would happen if we didn’t have the pipe? We could nest each function call inside the previous call:\n\narrange(\n  select(\n    mutate(\n      filter(\n        flights, \n        dest == \"IAH\"\n      ),\n      speed = distance / air_time * 60\n    ),\n    year:day, dep_time, carrier, flight, speed\n  ),\n  desc(speed)\n)\n\nOr we could use a bunch of intermediate objects:\n\nflights1 &lt;- filter(flights, dest == \"IAH\")\nflights2 &lt;- mutate(flights1, speed = distance / air_time * 60)\nflights3 &lt;- select(flights2, year:day, dep_time, carrier, flight, speed)\narrange(flights3, desc(speed))\n\nWhile both forms have their time and place, the pipe generally produces data analysis code that is easier to write and read.\n\nTo add the pipe to your code:\nuse the built-in keyboard shortcut Ctrl/Cmd + Shift + M\nYou’ll need to make one change to your RStudio options to use |&gt; instead of %&gt;%:\n(the “Use native pipe operator” option which can be found on the “Editing” panel of the “Code” options. Figure 3.1)\n\nFor simple cases, |&gt; and %&gt;% behave identically. So why do we recommend the base pipe? - Firstly, because it’s part of base R, it’s always available for you to use, even when you’re not using the tidyverse. - Secondly, |&gt; is quite a bit simpler than %&gt;%: in the time between the invention of %&gt;% in 2014 and the inclusion of |&gt; in R 4.1.0 in 2021, we gained a better understanding of the pipe. This allowed the base implementation to jettison infrequently used and less important features.\n\n\n\n\n\n\n\n\n\n\nto divide your dataset into groups meaningful for your analysis:\n\n\nflights |&gt; \n  group_by(month)\n\ndoesn’t change the data but, it is “grouped by” month (Groups: month [12]).\n\n\n\n\nThe most important grouped operation, if being used to calculate a single summary statistic, reduces the data frame to have a single row for each group. In dplyr, this operation is performed by summarize(), as shown by the following example, which computes the average departure delay by month:\n\nflights |&gt; \n  group_by(month) |&gt; \n  summarize(\n    avg_delay = mean(dep_delay)\n  )\n\nerror!\n\nflights |&gt; \n  group_by(month) |&gt; \n  summarize(\n    avg_delay = mean(dep_delay, na.rm = TRUE)\n  )\n\n\n\nreturns the number of rows in each group:\n\nflights |&gt; \n  group_by(month) |&gt; \n  summarize(\n    avg_delay = mean(dep_delay, na.rm = TRUE), \n    n = n()\n  )\n\nMeans and counts can get you a surprisingly long way in data science!\n\n\n\n\n\n\nThere are five handy functions that allow you extract specific rows within each group:\ndf |&gt; slice_head(n = 1) takes the first row from each group. df |&gt; slice_tail(n = 1) takes the last row in each group. df |&gt; slice_min(x, n = 1) takes the row with the smallest value of column x. df |&gt; slice_max(x, n = 1) takes the row with the largest value of column x. df |&gt; slice_sample(n = 1) takes one random row. You can vary n to select more than one row, or instead of n =, you can use prop = 0.1 to select (e.g.) 10% of the rows in each group. - For example, the following code finds the flights that are most delayed upon arrival at each destination:\n\nflights |&gt; \n  group_by(dest) |&gt; \n  slice_max(arr_delay, n = 1) |&gt;\n  relocate(dest)\n\nNote that there are 105 destinations but we get 108 rows here. What’s up? slice_min() and slice_max() keep tied values so n = 1 means give us all rows with the highest value. If you want exactly one row per group you can set with_ties = FALSE.\nThis is similar to computing the max delay with summarize(), but you get the whole corresponding row (or rows if there’s a tie) instead of the single summary statistic.\n\nGrouping by multiple variables\nYou can create groups using more than one variable. For example, we could make a group for each date.\n\ndaily &lt;- flights |&gt;  \n  group_by(year, month, day)\ndaily\n\nWhen you summarize a tibble grouped by more than one variable, each summary peels off the last group. In hindsight, this wasn’t a great way to make this function work, but it’s difficult to change without breaking existing code. To make it obvious what’s happening, dplyr displays a message that tells you how you can change this behavior:\n\ndaily_flights &lt;- daily |&gt; \n  summarize(n = n())\n\nIf you’re happy with this behavior, you can explicitly request it in order to suppress the message:\n\ndaily_flights &lt;- daily |&gt; \n  summarize(\n    n = n(), \n    .groups = \"drop_last\"\n  )\n\nAlternatively, change the default behavior by setting a different value, e.g., “drop” to drop all grouping or “keep” to preserve the same groups.\n\n\n\n\n\nYou might also want to remove grouping from a data frame without using summarize(). You can do this with ungroup().\n\ndaily |&gt; \n  ungroup()\n\nNow let’s see what happens when you summarize an ungrouped data frame.\n\ndaily |&gt; \n  ungroup() |&gt;\n  summarize(\n    avg_delay = mean(dep_delay, na.rm = TRUE), \n    flights = n()\n  )\n\nYou get a single row back because dplyr treats all the rows in an ungrouped data frame as belonging to one group. \n\n\n\ndplyr 1.1.0 includes a new, experimental, syntax for per-operation grouping, the .by argument. group_by() and ungroup() aren’t going away, but you can now also use the .by argument to group within a single operation:\n\nflights |&gt; \n  summarize(\n    delay = mean(dep_delay, na.rm = TRUE), \n    n = n(),\n    .by = month\n  )\n\nOr if you want to group by multiple variables:\n\nflights |&gt; \n  summarize(\n    delay = mean(dep_delay, na.rm = TRUE), \n    n = n(),\n    .by = c(origin, dest)\n  )\n\n.by works with all verbs and has the advantage that you don’t need to use the .groups argument to suppress the grouping message or ungroup() when you’re done.\nWe didn’t focus on this syntax in this chapter because it was very new when we wrote the book. We did want to mention it because we think it has a lot of promise and it’s likely to be quite popular. You can learn more about it in the dplyr 1.1.0 blog post."
  },
  {
    "objectID": "j3.4_tidyverse.html#linhas",
    "href": "j3.4_tidyverse.html#linhas",
    "title": "TIDYVERSE",
    "section": "",
    "text": "all flights that departed more than 120 minutes (two hours) late:\n\n\nflights |&gt; \n  filter(dep_delay &gt; 120)\n\n\nFlights that departed on January 1\n\n\nflights |&gt; \n  filter(month == 1 & day == 1)\n\n\nFlights that departed in January or February\n\n\nflights |&gt; \n  filter(month == 1 | month == 2)\n\n\n\n\nA shorter way to select flights that departed in January or February\n\n\nflights |&gt; \n  filter(month %in% c(1, 2))\n\n\n\n\n\n\norder of the rows based on the value of the columns.\n\nflights |&gt; \n  arrange(year, month, day, dep_time)\n\n\n\n\nflights |&gt; \n  arrange(desc(dep_delay))\n\n\n\n\n\n\nRemove duplicate rows, if any\n\nflights |&gt;  \n  distinct()\n\nFind all unique origin and destination pairs\n\nflights |&gt; \n  distinct(origin, dest)\n\n\nto the keep other columns when filtering for unique rows, use the .keep_all = TRUE option.\n\n\nflights |&gt; \n  distinct(origin, dest, .keep_all = TRUE)\n\n\n\nTo find the number of occurrences instead, you’re better off swapping distinct() for count(), and with the sort = TRUE argument you can arrange them in descending order of number of occurrences.\n\n\nflights |&gt;\n  count(origin, dest, sort = TRUE)"
  },
  {
    "objectID": "j3.4_tidyverse.html#colunas",
    "href": "j3.4_tidyverse.html#colunas",
    "title": "TIDYVERSE",
    "section": "",
    "text": "flights |&gt; \n  mutate(\n    gain = dep_delay - arr_delay,\n    speed = distance / air_time * 60\n  )\n\nBy default, mutate() adds new columns on the right hand side of your dataset,\n\n.before argument to add the variables to the left hand side:\n\n\nflights |&gt; \n  mutate(\n    gain = dep_delay - arr_delay,\n    speed = distance / air_time * 60,\n    .before = 1                           # 1 is the position\n  )\n\n\nuse the variable name instead of a position in both .before and .after\n\n\nflights |&gt; \n  mutate(\n    gain = dep_delay - arr_delay,\n    speed = distance / air_time * 60,\n    .after = day                       # variable name instead of position\n  )\n\n\n\nused specifies that we only keep the columns that were involved or created in the mutate() step.\n\nflights |&gt; \n  mutate(\n    gain = dep_delay - arr_delay,\n    hours = air_time / 60,\n    gain_per_hour = gain / hours,\n    .keep = \"used\"\n  )\n\n\n\n\n\n\n\nSelect columns by name:\n\n\nflights |&gt; \n  select(year, month, day)\n\n\nSelect all columns between year and day (inclusive):\n\n\nflights |&gt; \n  select(year:day)\n\n\nSelect all columns except those from year to day (inclusive):\n\n\nflights |&gt; \n  select(!year:day)\n\n\nSelect all columns that are characters:\n\n\nflights |&gt; \n  select(where(is.character))\n\nThere are a number of helper functions you can use within select(): - starts_with(“abc”) : matches names that begin with “abc”.\n- ends_with(“xyz”) : matches names that end with “xyz”.\n- contains(“ijk”) : matches names that contain “ijk”.\n- num_range(“x”, 1:3) : matches x1, x2 and x3.\n\n\nrename variables as you select() them by using =. The new name appears on the left hand side of the =, the old variable appears on the right hand side:\n\n\nflights |&gt; \n  select(tail_num = tailnum)\n\n\n\n\n\n\nto keep all the existing variables and just want to rename a few, you can use rename() instead of select():\n\n\nflights |&gt; \n  rename(tail_num = tailnum)\n\n\nIf you have a bunch of inconsistently named columns and it would be painful to fix them all by hand, check out janitor::clean_names() which provides some useful automated cleaning.\n\n\n\n\n\n\nto move variables around. You might want to collect related variables together or move important variables to the front.\n\nBy default relocate() moves variables to the front:\n\n\nflights |&gt; \n  relocate(time_hour, air_time)\n\n_ To specify where to put them use the .before and .after arguments, just like in mutate():\n\nflights |&gt; \n  relocate(year:dep_time, .after = time_hour)\n\n\nflights |&gt; \n  relocate(starts_with(\"arr\"), .before = dep_time)"
  },
  {
    "objectID": "j3.4_tidyverse.html#the-pipe",
    "href": "j3.4_tidyverse.html#the-pipe",
    "title": "TIDYVERSE",
    "section": "",
    "text": "its real power arises when you start to combine multiple verbs.\n\nyou wanted to find the fast flights to Houston’s IAH airport: you need to combine filter(), mutate(), select(), and arrange():\n\n\nflights |&gt; \n  filter(dest == \"IAH\") |&gt; \n  mutate(speed = distance / air_time * 60) |&gt; \n  select(year:day, dep_time, carrier, flight, speed) |&gt; \n  arrange(desc(speed))\n\nEven though this pipeline has four steps, it’s easy to skim because the verbs come at the start of each line: start with the flights data, then filter, then mutate, then select, then arrange.\nWhat would happen if we didn’t have the pipe? We could nest each function call inside the previous call:\n\narrange(\n  select(\n    mutate(\n      filter(\n        flights, \n        dest == \"IAH\"\n      ),\n      speed = distance / air_time * 60\n    ),\n    year:day, dep_time, carrier, flight, speed\n  ),\n  desc(speed)\n)\n\nOr we could use a bunch of intermediate objects:\n\nflights1 &lt;- filter(flights, dest == \"IAH\")\nflights2 &lt;- mutate(flights1, speed = distance / air_time * 60)\nflights3 &lt;- select(flights2, year:day, dep_time, carrier, flight, speed)\narrange(flights3, desc(speed))\n\nWhile both forms have their time and place, the pipe generally produces data analysis code that is easier to write and read.\n\nTo add the pipe to your code:\nuse the built-in keyboard shortcut Ctrl/Cmd + Shift + M\nYou’ll need to make one change to your RStudio options to use |&gt; instead of %&gt;%:\n(the “Use native pipe operator” option which can be found on the “Editing” panel of the “Code” options. Figure 3.1)\n\nFor simple cases, |&gt; and %&gt;% behave identically. So why do we recommend the base pipe? - Firstly, because it’s part of base R, it’s always available for you to use, even when you’re not using the tidyverse. - Secondly, |&gt; is quite a bit simpler than %&gt;%: in the time between the invention of %&gt;% in 2014 and the inclusion of |&gt; in R 4.1.0 in 2021, we gained a better understanding of the pipe. This allowed the base implementation to jettison infrequently used and less important features."
  },
  {
    "objectID": "j3.4_tidyverse.html#groups",
    "href": "j3.4_tidyverse.html#groups",
    "title": "TIDYVERSE",
    "section": "",
    "text": "to divide your dataset into groups meaningful for your analysis:\n\n\nflights |&gt; \n  group_by(month)\n\ndoesn’t change the data but, it is “grouped by” month (Groups: month [12]).\n\n\n\n\nThe most important grouped operation, if being used to calculate a single summary statistic, reduces the data frame to have a single row for each group. In dplyr, this operation is performed by summarize(), as shown by the following example, which computes the average departure delay by month:\n\nflights |&gt; \n  group_by(month) |&gt; \n  summarize(\n    avg_delay = mean(dep_delay)\n  )\n\nerror!\n\nflights |&gt; \n  group_by(month) |&gt; \n  summarize(\n    avg_delay = mean(dep_delay, na.rm = TRUE)\n  )\n\n\n\nreturns the number of rows in each group:\n\nflights |&gt; \n  group_by(month) |&gt; \n  summarize(\n    avg_delay = mean(dep_delay, na.rm = TRUE), \n    n = n()\n  )\n\nMeans and counts can get you a surprisingly long way in data science!\n\n\n\n\n\n\nThere are five handy functions that allow you extract specific rows within each group:\ndf |&gt; slice_head(n = 1) takes the first row from each group. df |&gt; slice_tail(n = 1) takes the last row in each group. df |&gt; slice_min(x, n = 1) takes the row with the smallest value of column x. df |&gt; slice_max(x, n = 1) takes the row with the largest value of column x. df |&gt; slice_sample(n = 1) takes one random row. You can vary n to select more than one row, or instead of n =, you can use prop = 0.1 to select (e.g.) 10% of the rows in each group. - For example, the following code finds the flights that are most delayed upon arrival at each destination:\n\nflights |&gt; \n  group_by(dest) |&gt; \n  slice_max(arr_delay, n = 1) |&gt;\n  relocate(dest)\n\nNote that there are 105 destinations but we get 108 rows here. What’s up? slice_min() and slice_max() keep tied values so n = 1 means give us all rows with the highest value. If you want exactly one row per group you can set with_ties = FALSE.\nThis is similar to computing the max delay with summarize(), but you get the whole corresponding row (or rows if there’s a tie) instead of the single summary statistic.\n\nGrouping by multiple variables\nYou can create groups using more than one variable. For example, we could make a group for each date.\n\ndaily &lt;- flights |&gt;  \n  group_by(year, month, day)\ndaily\n\nWhen you summarize a tibble grouped by more than one variable, each summary peels off the last group. In hindsight, this wasn’t a great way to make this function work, but it’s difficult to change without breaking existing code. To make it obvious what’s happening, dplyr displays a message that tells you how you can change this behavior:\n\ndaily_flights &lt;- daily |&gt; \n  summarize(n = n())\n\nIf you’re happy with this behavior, you can explicitly request it in order to suppress the message:\n\ndaily_flights &lt;- daily |&gt; \n  summarize(\n    n = n(), \n    .groups = \"drop_last\"\n  )\n\nAlternatively, change the default behavior by setting a different value, e.g., “drop” to drop all grouping or “keep” to preserve the same groups.\n\n\n\n\n\nYou might also want to remove grouping from a data frame without using summarize(). You can do this with ungroup().\n\ndaily |&gt; \n  ungroup()\n\nNow let’s see what happens when you summarize an ungrouped data frame.\n\ndaily |&gt; \n  ungroup() |&gt;\n  summarize(\n    avg_delay = mean(dep_delay, na.rm = TRUE), \n    flights = n()\n  )\n\nYou get a single row back because dplyr treats all the rows in an ungrouped data frame as belonging to one group. \n\n\n\ndplyr 1.1.0 includes a new, experimental, syntax for per-operation grouping, the .by argument. group_by() and ungroup() aren’t going away, but you can now also use the .by argument to group within a single operation:\n\nflights |&gt; \n  summarize(\n    delay = mean(dep_delay, na.rm = TRUE), \n    n = n(),\n    .by = month\n  )\n\nOr if you want to group by multiple variables:\n\nflights |&gt; \n  summarize(\n    delay = mean(dep_delay, na.rm = TRUE), \n    n = n(),\n    .by = c(origin, dest)\n  )\n\n.by works with all verbs and has the advantage that you don’t need to use the .groups argument to suppress the grouping message or ungroup() when you’re done.\nWe didn’t focus on this syntax in this chapter because it was very new when we wrote the book. We did want to mention it because we think it has a lot of promise and it’s likely to be quite popular. You can learn more about it in the dplyr 1.1.0 blog post."
  },
  {
    "objectID": "j3.3_vectors.html",
    "href": "j3.3_vectors.html",
    "title": "VECTORS",
    "section": "",
    "text": "class(x)\n\n\ntable(x, exclude= FALSE)\ntable (is.na(x) )\n\n\nsummary(x)\nsum(x)\nmean (x)\nmedian(x)           \n\n\nlength(x)\nsort  (x)\nrev(x)\n\n\nstr(modelo1)  # estrutura do objeto\nattributes(modelo1) # atributos do objeto (não só mostrados no output)  \nmodelo1$Coef # Aceder a atributos específicos\n\n \n\n\n\n\nPerguntar a classe:\n\n\nclass (x)\n\n\n\nTestar a classe:\n\n\nis.numeric(x)\nis.character(x)\nis.factor (x)\nis.vector(x)\nis.matrix(x)\nis.data.frame(x)\n\n\n\nCoercionar a classe:\n\n\nas.numeric()\nas.character()\nas.factor ()\nas.vector()\nas.matrix()\nas.data.frame() \n    \n\nas.data.frame.matrix(mytable)   # Convertir  tabela em dataframe        \n\n\nATENÇÃO quando se ‘coercionam’ factores com categorias numéricas. O resultado pode não ser o esperado….\n\n \n\n\n\n\nDetectar NAs numa variável: \n\n\ntable (is.na(x))\n\n\n\nTabela que não exclua NAs:\n\n\n\ntable (x, exclude = FALSE)\n\n\n\nCalcular média duma variável com NAs: \n\n\nmean(x, na.rm = TRUE)\n\n\n\nEliminar observações com NA numa variável: \n\n\nDf &lt;-subset( Df   ,   !is.na (sexo))  \n\n\n\nEliminar obs com NA em todas as variables da base Df: \n\n\nDf &lt;- na.omit (Df)              \n\n\n\nRecodificar NAs em 0: \n\n\ny[is.na(y)] &lt;- 0              # recodifica “NA” de “y” em “0”\n\n\n\nRecodificar como NA: \n\n\n(D$x[D$x==88] &lt;- NA           # recodifica x==88  em NA\n\n\n\nListar linhas com NAs: \n\n\nDf[!complete.cases(Df),]\n\n\n\nCriar nova base sem NAs: \n\n\nDF_new &lt;- na.omit(DF)\n\nmais sobre NAs\n \n\n\n\n\nFactorizar uma variável numérica: \n\n\ncut (x, breaks=3)\n\n\n\nFactorizar uma variável não factor: \n\n\nv &lt;- c(0, 1, 1, 0, 5,5, 0)\n\nf &lt;- factor (v)\n\n\n\nVisualizar ‘levels’ de uma factor:\n\n\n\nlevels(f) \n\n[1] \"0\" \"1\" \"5\"\n\n\n\n\nAtribuir ‘labels’ a uma factor:\n\n\nf &lt;- factor(f,\n            levels = c(0,1, 5),\n             labels = c(\"azul\", \"verde\", \"cinzento\"))\n\n\n\nRecodificar em 2 categorias:\n\n\nf.2 &lt;- ifelse(f==\"azul\",  \"A\", \"nonA\") \n\n\n\nRecodificar em 3 categorias:\n\n\nage &lt;- c(9, 9, 11, 14, 16, 30, 50)\n\nage.3 &lt;- NA\nage.3  [age &lt; 10]             &lt;- \"child\"\nage.3  [age &gt;= 10 & age &lt; 20] &lt;- \"teenager\"\nage.3  [age &gt;= 20]            &lt;- \"adult\"\n\n\n\nMudar nome de um level\nmais aqui\n\n\nlibrary(plyr)\nf &lt;- revalue(f, c(\"azul\"=\"AZUL\"))\nf\n\n[1] AZUL     verde    verde    AZUL     cinzento cinzento AZUL    \nLevels: AZUL verde cinzento\n\n\n\n\nEspecificar a categoría de referencia:\n\n\nf &lt;- relevel (f, \"verde\")   # ver ordem de \"Levels\"\nf\n\n[1] AZUL     verde    verde    AZUL     cinzento cinzento AZUL    \nLevels: verde AZUL cinzento\n\n\n\n\nAgregar uma categoria: \n\n\nf &lt;- factor(f, levels = c(levels(f), \"BRANCO\"))\nf\n\n\n\nEliminar uma categoria:\n\n\n\nf &lt;- f[f !=\"cinzento\"]         # eliminar obs. da categoria   \nf &lt;- factor (f)                # (se eliminam as categorias sem obs)\nf\n\n[1] AZUL  verde verde AZUL  AZUL \nLevels: verde AZUL\n\n\n\n\nInvertir a ordem dos ‘levels’:\n\n\n\nf_rev  &lt;- factor(f, levels = rev(levels(f)))\nf_rev\n\n\n\nReordenar ‘levels’\n\n\nf &lt;- factor(f, levels = c(\"verde\", \"AZUL\"))\n\n(mais sobre reordenar )\n\n\nReverse order of factor levels\n\n\nlibrary(tidyverse)  \nfct_rev(f)\n\n\n\nReordenar var1 by var2 (exemplo)\n\n\nvar1 &lt;- reorder(var1, var2)\n\nvar1 &lt;- reorder(var1, -var2)  # descending\n\n\n\nOrdenar levels de uma factor baseado na ordem das linhas numa base\nmais info\n\n\n\nlibrary(dplyr)\n\nDf &lt;- mutate(Df, col = factor(col, col))\n\n\n\nlibrary(dplyr)\n\nDf &lt;- data.frame(\n  num = 5:1,\n  word = factor (c(\"five\", \"four\", \"three\", \"two\", \"one\")))\nlevels(Df$word) # levels are alphabetical by default\n\n[1] \"five\"  \"four\"  \"one\"   \"three\" \"two\"  \n\nDf$word # right now the order is 5,4,3,2,1\n\n[1] five  four  three two   one  \nLevels: five four one three two\n\nDf &lt;- Df %&gt;%\n  arrange(num) %&gt;%   # rearrange the Df in the order we want (1,2,3,4,5)\n  mutate(word = factor(word, word)) # this line reorders the factor in the same order\n\nlevels(Df$word) \n\n[1] \"one\"   \"two\"   \"three\" \"four\"  \"five\" \n\n\nMais sobre ordenar uma factor  \n\n\n\n\n\nimportar de excel a STATA:\n\n\n# magic number -20454  (o -21916, segun Cecilia\n# transformar en número, restar 20454, y asignar formato %td\n\n# generate statadate =date-20454\n# generate statadate =date-21916\n\n\n\nTransformar String, com formato: “10/08/84”\n\n\n\nx &lt;- c(\"10/08/84\", \"10/08/84\", \"10/08/84\")\n\n\ndates &lt;- as.Date(x, format= \"%d / %m /%y\")  # en 'format' indicar ordem da variável string\ndates\n\n[1] \"1984-08-10\" \"1984-08-10\" \"1984-08-10\"\n\nclass(dates)\n\n[1] \"Date\"\n\ndates2a &lt;- format(dates, format=\"%d  /%B   / %Y\")\ndates2a\n\n[1] \"10  /August   / 1984\" \"10  /August   / 1984\" \"10  /August   / 1984\"\n\ndates2b &lt;- format(dates, format=\"%d  /%B   / %y\")\ndates2b\n\n[1] \"10  /August   / 84\" \"10  /August   / 84\" \"10  /August   / 84\"\n\ndates2c &lt;- format(dates, format=\"%d  /%b   / %Y\")\ndates2c\n\n[1] \"10  /Aug   / 1984\" \"10  /Aug   / 1984\" \"10  /Aug   / 1984\"\n\n\n\n\nTransformar String, com formato: “10-Aug-79”\n\n\ny &lt;- c(\"10-Aug-79\", \"10-Aug-79\", \"10-Aug-79\")\ny\n\n[1] \"10-Aug-79\" \"10-Aug-79\" \"10-Aug-79\"\n\nd3 &lt;- as.Date (y, format=\"%d - %B - %y\")\nd3\n\n[1] \"1979-08-10\" \"1979-08-10\" \"1979-08-10\"\n\nd3c &lt;- format(d3, format=\"%d  /%B   / %Y\")\nd3c\n\n[1] \"10  /August   / 1979\" \"10  /August   / 1979\" \"10  /August   / 1979\"\n\n\n\nmais sobre string para date\n \n\n\n\n\nx[1:10]                      \nx[is.na(x)]                  \n\nx[!is.na(x)]                 \n \nx[!is.na(x) & x&gt;5]      \n\nx[c(3,5,7)]\n\nx[0]\n\nx[3000]\n\nx[c(-2,-10)]\n\nx[-c(2,10)]\n\n \n\n\n\n\nstrings &lt;- c(\"maçã\", \"banana\", \"laranja\", \"uva\", \"kiwi\")\n\n\nAcessar elementos individualmente\n\nstrings[1]\n\n[1] \"maçã\"\n\n\n\nAcessar vários elementos\n\nstrings[c(2, 4)]\n\n[1] \"banana\" \"uva\"   \n\n\n\nCombinação de Strings:\n\npaste(\"Eu gosto de\", strings[1])\n\n[1] \"Eu gosto de maçã\"\n\n\nAlterar Maiúsculas/Minúsculas:\n\ntoupper(strings)\n\n[1] \"MAÇÃ\"    \"BANANA\"  \"LARANJA\" \"UVA\"     \"KIWI\"   \n\ntolower(strings)\n\n[1] \"maçã\"    \"banana\"  \"laranja\" \"uva\"     \"kiwi\"   \n\n\nExtração de Substrings:\n\nsubstr(strings[1], start = 1, stop = 3)\n\n[1] \"maç\"\n\n\nLength da String:\n\nnchar(strings[1])\n\n[1] 4\n\n\n\nVerificar se uma string contém um padrão específico\n\ncontem_maca &lt;- grepl(\"maçã\", strings)\nprint(contem_maca)\n\n[1]  TRUE FALSE FALSE FALSE FALSE"
  },
  {
    "objectID": "j3.3_vectors.html#exploração-básica",
    "href": "j3.3_vectors.html#exploração-básica",
    "title": "VECTORS",
    "section": "",
    "text": "class(x)\n\n\ntable(x, exclude= FALSE)\ntable (is.na(x) )\n\n\nsummary(x)\nsum(x)\nmean (x)\nmedian(x)           \n\n\nlength(x)\nsort  (x)\nrev(x)\n\n\nstr(modelo1)  # estrutura do objeto\nattributes(modelo1) # atributos do objeto (não só mostrados no output)  \nmodelo1$Coef # Aceder a atributos específicos"
  },
  {
    "objectID": "j3.3_vectors.html#classes-de-objectos",
    "href": "j3.3_vectors.html#classes-de-objectos",
    "title": "VECTORS",
    "section": "",
    "text": "Perguntar a classe:\n\n\nclass (x)\n\n\n\nTestar a classe:\n\n\nis.numeric(x)\nis.character(x)\nis.factor (x)\nis.vector(x)\nis.matrix(x)\nis.data.frame(x)\n\n\n\nCoercionar a classe:\n\n\nas.numeric()\nas.character()\nas.factor ()\nas.vector()\nas.matrix()\nas.data.frame() \n    \n\nas.data.frame.matrix(mytable)   # Convertir  tabela em dataframe        \n\n\nATENÇÃO quando se ‘coercionam’ factores com categorias numéricas. O resultado pode não ser o esperado…."
  },
  {
    "objectID": "j3.3_vectors.html#valores-em-falta",
    "href": "j3.3_vectors.html#valores-em-falta",
    "title": "VECTORS",
    "section": "",
    "text": "Detectar NAs numa variável: \n\n\ntable (is.na(x))\n\n\n\nTabela que não exclua NAs:\n\n\n\ntable (x, exclude = FALSE)\n\n\n\nCalcular média duma variável com NAs: \n\n\nmean(x, na.rm = TRUE)\n\n\n\nEliminar observações com NA numa variável: \n\n\nDf &lt;-subset( Df   ,   !is.na (sexo))  \n\n\n\nEliminar obs com NA em todas as variables da base Df: \n\n\nDf &lt;- na.omit (Df)              \n\n\n\nRecodificar NAs em 0: \n\n\ny[is.na(y)] &lt;- 0              # recodifica “NA” de “y” em “0”\n\n\n\nRecodificar como NA: \n\n\n(D$x[D$x==88] &lt;- NA           # recodifica x==88  em NA\n\n\n\nListar linhas com NAs: \n\n\nDf[!complete.cases(Df),]\n\n\n\nCriar nova base sem NAs: \n\n\nDF_new &lt;- na.omit(DF)\n\nmais sobre NAs"
  },
  {
    "objectID": "j3.3_vectors.html#factors",
    "href": "j3.3_vectors.html#factors",
    "title": "VECTORS",
    "section": "",
    "text": "Factorizar uma variável numérica: \n\n\ncut (x, breaks=3)\n\n\n\nFactorizar uma variável não factor: \n\n\nv &lt;- c(0, 1, 1, 0, 5,5, 0)\n\nf &lt;- factor (v)\n\n\n\nVisualizar ‘levels’ de uma factor:\n\n\n\nlevels(f) \n\n[1] \"0\" \"1\" \"5\"\n\n\n\n\nAtribuir ‘labels’ a uma factor:\n\n\nf &lt;- factor(f,\n            levels = c(0,1, 5),\n             labels = c(\"azul\", \"verde\", \"cinzento\"))\n\n\n\nRecodificar em 2 categorias:\n\n\nf.2 &lt;- ifelse(f==\"azul\",  \"A\", \"nonA\") \n\n\n\nRecodificar em 3 categorias:\n\n\nage &lt;- c(9, 9, 11, 14, 16, 30, 50)\n\nage.3 &lt;- NA\nage.3  [age &lt; 10]             &lt;- \"child\"\nage.3  [age &gt;= 10 & age &lt; 20] &lt;- \"teenager\"\nage.3  [age &gt;= 20]            &lt;- \"adult\"\n\n\n\nMudar nome de um level\nmais aqui\n\n\nlibrary(plyr)\nf &lt;- revalue(f, c(\"azul\"=\"AZUL\"))\nf\n\n[1] AZUL     verde    verde    AZUL     cinzento cinzento AZUL    \nLevels: AZUL verde cinzento\n\n\n\n\nEspecificar a categoría de referencia:\n\n\nf &lt;- relevel (f, \"verde\")   # ver ordem de \"Levels\"\nf\n\n[1] AZUL     verde    verde    AZUL     cinzento cinzento AZUL    \nLevels: verde AZUL cinzento\n\n\n\n\nAgregar uma categoria: \n\n\nf &lt;- factor(f, levels = c(levels(f), \"BRANCO\"))\nf\n\n\n\nEliminar uma categoria:\n\n\n\nf &lt;- f[f !=\"cinzento\"]         # eliminar obs. da categoria   \nf &lt;- factor (f)                # (se eliminam as categorias sem obs)\nf\n\n[1] AZUL  verde verde AZUL  AZUL \nLevels: verde AZUL\n\n\n\n\nInvertir a ordem dos ‘levels’:\n\n\n\nf_rev  &lt;- factor(f, levels = rev(levels(f)))\nf_rev\n\n\n\nReordenar ‘levels’\n\n\nf &lt;- factor(f, levels = c(\"verde\", \"AZUL\"))\n\n(mais sobre reordenar )\n\n\nReverse order of factor levels\n\n\nlibrary(tidyverse)  \nfct_rev(f)\n\n\n\nReordenar var1 by var2 (exemplo)\n\n\nvar1 &lt;- reorder(var1, var2)\n\nvar1 &lt;- reorder(var1, -var2)  # descending\n\n\n\nOrdenar levels de uma factor baseado na ordem das linhas numa base\nmais info\n\n\n\nlibrary(dplyr)\n\nDf &lt;- mutate(Df, col = factor(col, col))\n\n\n\nlibrary(dplyr)\n\nDf &lt;- data.frame(\n  num = 5:1,\n  word = factor (c(\"five\", \"four\", \"three\", \"two\", \"one\")))\nlevels(Df$word) # levels are alphabetical by default\n\n[1] \"five\"  \"four\"  \"one\"   \"three\" \"two\"  \n\nDf$word # right now the order is 5,4,3,2,1\n\n[1] five  four  three two   one  \nLevels: five four one three two\n\nDf &lt;- Df %&gt;%\n  arrange(num) %&gt;%   # rearrange the Df in the order we want (1,2,3,4,5)\n  mutate(word = factor(word, word)) # this line reorders the factor in the same order\n\nlevels(Df$word) \n\n[1] \"one\"   \"two\"   \"three\" \"four\"  \"five\" \n\n\nMais sobre ordenar uma factor"
  },
  {
    "objectID": "j3.3_vectors.html#dates",
    "href": "j3.3_vectors.html#dates",
    "title": "VECTORS",
    "section": "",
    "text": "importar de excel a STATA:\n\n\n# magic number -20454  (o -21916, segun Cecilia\n# transformar en número, restar 20454, y asignar formato %td\n\n# generate statadate =date-20454\n# generate statadate =date-21916\n\n\n\nTransformar String, com formato: “10/08/84”\n\n\n\nx &lt;- c(\"10/08/84\", \"10/08/84\", \"10/08/84\")\n\n\ndates &lt;- as.Date(x, format= \"%d / %m /%y\")  # en 'format' indicar ordem da variável string\ndates\n\n[1] \"1984-08-10\" \"1984-08-10\" \"1984-08-10\"\n\nclass(dates)\n\n[1] \"Date\"\n\ndates2a &lt;- format(dates, format=\"%d  /%B   / %Y\")\ndates2a\n\n[1] \"10  /August   / 1984\" \"10  /August   / 1984\" \"10  /August   / 1984\"\n\ndates2b &lt;- format(dates, format=\"%d  /%B   / %y\")\ndates2b\n\n[1] \"10  /August   / 84\" \"10  /August   / 84\" \"10  /August   / 84\"\n\ndates2c &lt;- format(dates, format=\"%d  /%b   / %Y\")\ndates2c\n\n[1] \"10  /Aug   / 1984\" \"10  /Aug   / 1984\" \"10  /Aug   / 1984\"\n\n\n\n\nTransformar String, com formato: “10-Aug-79”\n\n\ny &lt;- c(\"10-Aug-79\", \"10-Aug-79\", \"10-Aug-79\")\ny\n\n[1] \"10-Aug-79\" \"10-Aug-79\" \"10-Aug-79\"\n\nd3 &lt;- as.Date (y, format=\"%d - %B - %y\")\nd3\n\n[1] \"1979-08-10\" \"1979-08-10\" \"1979-08-10\"\n\nd3c &lt;- format(d3, format=\"%d  /%B   / %Y\")\nd3c\n\n[1] \"10  /August   / 1979\" \"10  /August   / 1979\" \"10  /August   / 1979\"\n\n\n\nmais sobre string para date"
  },
  {
    "objectID": "j3.3_vectors.html#parênteses-retos-subsetting",
    "href": "j3.3_vectors.html#parênteses-retos-subsetting",
    "title": "VECTORS",
    "section": "",
    "text": "x[1:10]                      \nx[is.na(x)]                  \n\nx[!is.na(x)]                 \n \nx[!is.na(x) & x&gt;5]      \n\nx[c(3,5,7)]\n\nx[0]\n\nx[3000]\n\nx[c(-2,-10)]\n\nx[-c(2,10)]"
  },
  {
    "objectID": "j3.3_vectors.html#strings",
    "href": "j3.3_vectors.html#strings",
    "title": "VECTORS",
    "section": "",
    "text": "strings &lt;- c(\"maçã\", \"banana\", \"laranja\", \"uva\", \"kiwi\")\n\n\nAcessar elementos individualmente\n\nstrings[1]\n\n[1] \"maçã\"\n\n\n\nAcessar vários elementos\n\nstrings[c(2, 4)]\n\n[1] \"banana\" \"uva\"   \n\n\n\nCombinação de Strings:\n\npaste(\"Eu gosto de\", strings[1])\n\n[1] \"Eu gosto de maçã\"\n\n\nAlterar Maiúsculas/Minúsculas:\n\ntoupper(strings)\n\n[1] \"MAÇÃ\"    \"BANANA\"  \"LARANJA\" \"UVA\"     \"KIWI\"   \n\ntolower(strings)\n\n[1] \"maçã\"    \"banana\"  \"laranja\" \"uva\"     \"kiwi\"   \n\n\nExtração de Substrings:\n\nsubstr(strings[1], start = 1, stop = 3)\n\n[1] \"maç\"\n\n\nLength da String:\n\nnchar(strings[1])\n\n[1] 4\n\n\n\nVerificar se uma string contém um padrão específico\n\ncontem_maca &lt;- grepl(\"maçã\", strings)\nprint(contem_maca)\n\n[1]  TRUE FALSE FALSE FALSE FALSE"
  },
  {
    "objectID": "j3.4_QUARTO_doc.html",
    "href": "j3.4_QUARTO_doc.html",
    "title": "Documento QUARTO",
    "section": "",
    "text": "Tudo aqui"
  },
  {
    "objectID": "j3.4_QUARTO_doc.html#footnotes",
    "href": "j3.4_QUARTO_doc.html#footnotes",
    "title": "Documento QUARTO",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nNota de rodapé 1 que aparecerá no pé da página↩︎\nNota de rodapé 2, também aparecerá no pé da página↩︎"
  },
  {
    "objectID": "j3.5_GRAFICOS.html",
    "href": "j3.5_GRAFICOS.html",
    "title": "Estatística Descritiva",
    "section": "",
    "text": "duração &lt;- c(200, 240, 140, 120, 150, 230, 190, 140, 80, 210, 200, 80, 80, 110, 190, 110)\n\n\n\n\n\nplot(duração, \n     main = \"Duração dos Eventos\",  # Título do gráfico\n     xlab = \"Número do Evento\",      # Rótulo para o eixo x\n     ylab = \"Duração (minutos)\",    # Rótulo para o eixo y\n     pch = 16,                      # Caráter do ponto\n     col = \"blue\"                   # Cor do ponto\n)\n\n\n\n\n\n\nbarplot(duração, \n        names.arg = seq_along(duração),  # Números dos eventos no eixo x\n        main = \"Duração dos Eventos\",     # Título do gráfico\n        xlab = \"Número do Evento\",        # Rótulo para o eixo x\n        ylab = \"Duração (dias)\",          # Rótulo para o eixo y\n        col = \"skyblue\"                   # Cor das barras\n)\n\n\n\n\n\n\nhist(duração, \n     main = \"Distribuição da Duração dos Eventos\",   # Título do histograma\n     xlab = \"Duração (días)\",                        # Rótulo para o eixo x\n     ylab = \"Frequência\",                           # Rótulo para o eixo y\n     col = \"lightgreen\",                            # Cor das barras\n     border = \"black\"                               # Cor da borda das barras\n)\n\n\n\n\n\n\nboxplot(duração,\n        main = \"Boxplot da Duração dos Eventos\",  # Título do boxplot\n        ylab = \"Duração (minutos)\",              # Rótulo para o eixo y\n        col = \"lightcoral\",                       # Cor das caixas\n        border = \"black\"                         # Cor da borda das caixas\n)\n\n\n\n\n\n\nplot(duração, \n     type = \"l\", \n     col = \"red\", \n     lty = 1, \n     lwd = 2,\n     main = \"Gráfico de Linhas da Duração dos Eventos\",\n     xlab = \"Número do Evento\", \n     ylab = \"Duração (minutos)\")\n\n\n\n\n\n\npie(table(duração), \n    main = \"Gráfico de Pizza da Duração dos Eventos\")\n\n\n\n\n\n\nplot(density(duração), main = \"Gráfico de Área da Duração dos Eventos\",\n     xlab = \"Duração (minutos)\", ylab = \"Densidade\", col = \"blue\", lwd = 2)"
  },
  {
    "objectID": "j3.5_GRAFICOS.html#gráfico-de-dispersão",
    "href": "j3.5_GRAFICOS.html#gráfico-de-dispersão",
    "title": "Estatística Descritiva",
    "section": "",
    "text": "plot(duração, \n     main = \"Duração dos Eventos\",  # Título do gráfico\n     xlab = \"Número do Evento\",      # Rótulo para o eixo x\n     ylab = \"Duração (minutos)\",    # Rótulo para o eixo y\n     pch = 16,                      # Caráter do ponto\n     col = \"blue\"                   # Cor do ponto\n)"
  },
  {
    "objectID": "j3.5_GRAFICOS.html#gráfico-de-barras",
    "href": "j3.5_GRAFICOS.html#gráfico-de-barras",
    "title": "Estatística Descritiva",
    "section": "",
    "text": "barplot(duração, \n        names.arg = seq_along(duração),  # Números dos eventos no eixo x\n        main = \"Duração dos Eventos\",     # Título do gráfico\n        xlab = \"Número do Evento\",        # Rótulo para o eixo x\n        ylab = \"Duração (dias)\",          # Rótulo para o eixo y\n        col = \"skyblue\"                   # Cor das barras\n)"
  },
  {
    "objectID": "j3.5_GRAFICOS.html#histograma",
    "href": "j3.5_GRAFICOS.html#histograma",
    "title": "Estatística Descritiva",
    "section": "",
    "text": "hist(duração, \n     main = \"Distribuição da Duração dos Eventos\",   # Título do histograma\n     xlab = \"Duração (días)\",                        # Rótulo para o eixo x\n     ylab = \"Frequência\",                           # Rótulo para o eixo y\n     col = \"lightgreen\",                            # Cor das barras\n     border = \"black\"                               # Cor da borda das barras\n)"
  },
  {
    "objectID": "j3.5_GRAFICOS.html#boxplot",
    "href": "j3.5_GRAFICOS.html#boxplot",
    "title": "Estatística Descritiva",
    "section": "",
    "text": "boxplot(duração,\n        main = \"Boxplot da Duração dos Eventos\",  # Título do boxplot\n        ylab = \"Duração (minutos)\",              # Rótulo para o eixo y\n        col = \"lightcoral\",                       # Cor das caixas\n        border = \"black\"                         # Cor da borda das caixas\n)"
  },
  {
    "objectID": "j3.5_GRAFICOS.html#gráfico-de-linhas",
    "href": "j3.5_GRAFICOS.html#gráfico-de-linhas",
    "title": "Estatística Descritiva",
    "section": "",
    "text": "plot(duração, \n     type = \"l\", \n     col = \"red\", \n     lty = 1, \n     lwd = 2,\n     main = \"Gráfico de Linhas da Duração dos Eventos\",\n     xlab = \"Número do Evento\", \n     ylab = \"Duração (minutos)\")"
  },
  {
    "objectID": "j3.5_GRAFICOS.html#gráfico-de-pizza",
    "href": "j3.5_GRAFICOS.html#gráfico-de-pizza",
    "title": "Estatística Descritiva",
    "section": "",
    "text": "pie(table(duração), \n    main = \"Gráfico de Pizza da Duração dos Eventos\")"
  },
  {
    "objectID": "j3.5_GRAFICOS.html#gráfico-de-área",
    "href": "j3.5_GRAFICOS.html#gráfico-de-área",
    "title": "Estatística Descritiva",
    "section": "",
    "text": "plot(density(duração), main = \"Gráfico de Área da Duração dos Eventos\",\n     xlab = \"Duração (minutos)\", ylab = \"Densidade\", col = \"blue\", lwd = 2)"
  },
  {
    "objectID": "j3.5_GRAFICOS.html#gráfico-de-pizza-1",
    "href": "j3.5_GRAFICOS.html#gráfico-de-pizza-1",
    "title": "Estatística Descritiva",
    "section": "Gráfico de pizza",
    "text": "Gráfico de pizza\n\npie(table(especialista),\n    main = \"Distribuição dos Especialistas\",\n    col = c(\"lightblue\", \"lightgreen\"),\n    labels = c(\"Não-Especialista\", \"Especialista\"))"
  },
  {
    "objectID": "j3.5_GRAFICOS.html#gráfico-de-barras-da-média-da-duração-por-categoria-de-especialista",
    "href": "j3.5_GRAFICOS.html#gráfico-de-barras-da-média-da-duração-por-categoria-de-especialista",
    "title": "Estatística Descritiva",
    "section": "Gráfico de barras da média da duração por categoria de especialista",
    "text": "Gráfico de barras da média da duração por categoria de especialista\n\nbarplot(tapply(duração, especialista, mean), \n        main = \"Média da Duração por Categoria de Especialista\",\n        xlab = \"Categoria de Especialista\", ylab = \"Média da Duração\",\n        col = c(\"lightblue\", \"lightgreen\"))"
  },
  {
    "objectID": "j3.5_GRAFICOS.html#boxplot-da-duração-por-categoria-de-especialista",
    "href": "j3.5_GRAFICOS.html#boxplot-da-duração-por-categoria-de-especialista",
    "title": "Estatística Descritiva",
    "section": "Boxplot da duração por categoria de especialista",
    "text": "Boxplot da duração por categoria de especialista\n\nboxplot(duração ~ especialista, \n        main = \"Distribuição da Duração por Categoria de Especialista\",\n        xlab = \"Categoria de Especialista\", ylab = \"Duração\",\n        col = c(\"lightblue\", \"lightgreen\"))"
  },
  {
    "objectID": "j3.6_testes_tool.html",
    "href": "j3.6_testes_tool.html",
    "title": "Testes",
    "section": "",
    "text": "Preform a t-test for difference between means.\nt.test(x, y)\nLinear model\nlm(x ~ y, data=df)\nGeneralised linear model.\nglm(x ~ y, data=df)"
  },
  {
    "objectID": "j3.6_testes_tool.html#testes-t",
    "href": "j3.6_testes_tool.html#testes-t",
    "title": "Testes",
    "section": "Testes-t",
    "text": "Testes-t\nSintaxe por defeto\n\nt.test(x, y = NULL,\n       alternative = c(\"two.sided\", \"less\", \"greater\"),\n       mu = 0, \n       paired = FALSE, \n       var.equal = FALSE,\n       conf.level = 0.95, ...)\n\n\n\nTeste-t para uma amosta\n\nt.test(T$Q, mu=10, alternative = \"two.sided\") \n# H0: mu=10     \n# HA: mu!=10\n\n\n\nt.test(T$Q, mu=10, alternative = \"less\") \n# H0: mu=10 \n# HA: mu&lt;10\n\n\n\n\nTeste-t para duas amostas emparelhadas\n\nt.test(T$Q,T$Q2,\n       paired=TRUE, \n       alternative = \"two.sided\") \n\n# H_0: mu1 -mu2 = 0      \n# H_A: mu1 -mu2 != 0 \n\n\\(H_0: mu1 -mu2 = 0\\)\n\\(H_A: \\mu1 -\\mu2 != 0\\)\n\nt.test(T$Q,T$Q2,  paired=TRUE,  alternative = \"less\") \n\n\\(H_A: \\mu1 -\\mu2 &gt; 0\\)\n\nt.test(T$Q,T$Q2,  paired=TRUE,  alternative = \"greater\") \n\n\n\n\nTeste-t para duas amostas independentes (a)\n\nt.test(T$Q,T$Q2,  alternative=\"less\")             # numérica numérica\n\n\n\nTeste t para duas amostas independentes (b)\n\nt.test(Q~C, alternative=\"less\"   , data = T) # numerica e categórica"
  },
  {
    "objectID": "j3.6_testes_tool.html#anova",
    "href": "j3.6_testes_tool.html#anova",
    "title": "Testes",
    "section": "ANOVA",
    "text": "ANOVA\n\naov(yQ ~ xC, data=T)\n\nsummary(aov(yQ ~ xC, T))"
  },
  {
    "objectID": "j3.6_testes_tool.html#chi-teste",
    "href": "j3.6_testes_tool.html#chi-teste",
    "title": "Testes",
    "section": "Chi Teste",
    "text": "Chi Teste\n\nchisq.test(cat_var, cat_var  )   \n\n\n\nCorrelação\n\ncor(y, x, use=\"na.or.complete\")\n\n# use=\"na.or.complete\"\n# use=\"complete.obs\"\n# use=\"all.obs\"\n# use=\"everything\"\n\n\n\n\nOrdinary Least Squares\n\nmodelo1  &lt;-lm( yQ ~ xQ ,data= T)\nsummary(modelo1)\n\nconfint(modelo1,level=0.90)  # to report confindent intervals (instead of t-ratios and p-values)\n\nattributes (modelo1)\n    modelo1$coefficients\n    coefficients (modelo1)\n\n\nplot (T$xQ  , T$yQ)\nabline (modelo1)\n\n\n\n\nDiagnosticos da regressão\n1.Functional Form\n\nplot(y=modelo1$residuals, x=modelo1$fitted.values,\n      xlab=\"Fitted Values”,ylab=“Residuals\")\n\n1.Heteroscedasticity\n\n# install.packages(\"lmtest\")\nlibrary(lmtest)\nbptest(modelo1, studentize=FALSE)\n\n\n\n\nBETA COEFFICIENTS\n[to extract the standardized coefficients from a fitted linear model] (https://stackoverflow.com/questions/24305271/extracting-standardized-coefficients-from-lm-in-r)\nA. The easiest way is to just standardize your variables. The coefficients will then automatically be the standardized “beta”-coefficients (i.e. coefficients in terms of standard deviations).\n\nmodelo1 &lt;- lm(scale(yQ) ~ scale(xQ), data=T)\n\nB. An alternative: use lm.beta function, from QuantPsyc package\n\nlibrary(\"QuantPsyc\")\n\nmodelo2 &lt;- lm( yQ  ~ xQ , data=T)\n\nlm.beta(modelo2)"
  },
  {
    "objectID": "j3.7_simulations.html",
    "href": "j3.7_simulations.html",
    "title": "Amostras Aleatórias e Distribuições de Probabilidade",
    "section": "",
    "text": "para gerar amostras aleatórias\n\n#|\nsample(x, size, replace = FALSE, prob = NULL)\n\n\nAmostra aleatória de 5 números de 1 a 10\n\nsample(1:10, 5, replace = TRUE)\n\n[1]  5  6  4 10  8\n\n\nDado\n\nsample(1:6,  4,       replace=TRUE)\n\n[1] 4 5 4 4\n\n\n\nmoeda, 100 lançadas (ver abaixo rbinom)\n\nsample(c(0,1), 100, replace=TRUE)\n\n  [1] 0 1 1 1 0 0 1 0 1 1 1 0 1 0 0 0 1 0 0 0 1 0 1 1 1 0 0 0 0 0 0 1 0 0 1 1 0\n [38] 0 1 0 0 0 0 0 1 1 0 1 1 0 1 1 0 1 1 1 0 0 1 1 0 1 0 0 0 0 1 0 0 0 0 0 1 0\n [75] 1 1 0 0 1 1 0 1 1 1 1 0 1 0 1 1 1 1 0 0 0 0 0 0 0 0\n\n\n\nhist (sample (c(0,1), 100, replace=TRUE))\n\n\n\n\n\nmoeda ‘armadilha’\n\nsample(c(0,1), 100, replace=TRUE, prob=c(0.3, 0.7))\n\n  [1] 0 1 1 1 1 1 0 1 1 1 0 1 1 1 1 1 1 1 1 1 0 0 0 0 1 1 1 1 1 0 1 1 1 0 1 0 0\n [38] 1 0 0 1 0 1 1 1 0 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 0 1 0 1 0 0 0 1 1 1 1 1 1\n [75] 1 1 1 0 1 0 0 1 1 1 1 1 1 0 1 1 0 1 0 1 0 0 1 1 0 1\n\n\n\nhist( sample (c(0,1), 100, replace=TRUE, prob=c(0.3, 0.7))) \nhist( sample (c(0,1), 100, replace=TRUE, prob=c(0.3, 0.7))) \nhist( sample (c(0,1), 100, replace=TRUE, prob=c(0.3, 0.7))) \nhist( sample (c(0,1), 100, replace=TRUE, prob=c(0.3, 0.7))) \n\n \n\n\n\ngera números aleatórios a partir de uma distribuição uniforme.\n\nGerar 10 números aleatórios a partir de uma distribuição uniforme [0, 1]:\n\n\nrunif(10)\n\n [1] 0.70791554 0.44641000 0.04811943 0.77451167 0.02098629 0.62631530\n [7] 0.72643923 0.28312231 0.97223721 0.13370537\n\n\n\n\n\n\ngera números aleatórios a partir de uma distribuição normal.\n\nGerar 100 números aleatórios de uma distribuição normal com média 0 e desvio padrão 1:\n\n\namostra_normal &lt;- rnorm(100, mean = 0, sd = 1)\nprint(amostra_normal)\n\n  [1] -0.13213720 -1.08117659  0.72864697  1.87938876  0.65083070  1.13593531\n  [7] -0.93354073  0.90641326  0.22348408 -0.21765266  0.49937201 -2.27376235\n [13]  0.26970123 -0.40510533 -0.93360759 -1.09152160  1.49655958 -0.35191849\n [19]  0.76659790  0.52650254 -1.51377637  0.47702854  0.98202396 -1.25052239\n [25]  2.24050341  1.34231727  0.74794071 -0.33925129 -1.05955525 -0.78380360\n [31]  0.19902930 -0.85184526  0.57008269  0.65341293 -0.72971474 -0.26047315\n [37]  0.12983822 -0.26547163  1.05654544 -0.48358910  1.02478219 -0.19991669\n [43] -0.08871310  0.47289903 -0.66024410 -2.84679901  0.40333444 -0.06305526\n [49] -0.37932801 -0.71678476 -0.27071317  0.64137787  0.03142291 -1.22330038\n [55] -0.12919277 -0.28602434 -1.17256712  0.15024944 -1.51728706  1.71099445\n [61] -0.21117658 -0.96864323 -0.13405659 -1.63914974  0.26694883  0.41573731\n [67]  0.08544941 -0.09386499 -0.12327886  0.46261003  0.47744770  0.67372154\n [73] -0.48291685 -0.64190745 -1.73968726  0.74202094  1.22997902  0.20839089\n [79] -0.98568850 -0.25937669 -0.63624199 -0.68359073 -1.15615995 -0.62293251\n [85]  1.27633945 -1.11615655 -0.13982196  0.94299652 -0.50700775 -0.17321806\n [91]  0.70763009  3.40444573 -0.11860169 -2.09763904 -0.19315368 -0.93109249\n [97]  0.81951413  2.48050796  1.24245546 -0.15442760\n\n\n\n\n\n\nsimula números aleatórios a partir de uma distribuição binomial.\n\nSimular 50 lançamentos de uma moeda com probabilidade de sucesso 0.5\n\n\nrbinom(50, size = 1, prob = 0.5)\n\n [1] 0 1 0 1 1 0 0 0 1 0 1 1 0 0 1 0 1 1 0 0 0 0 0 1 1 1 0 1 0 0 0 0 1 1 0 0 0 1\n[39] 0 1 1 1 1 0 1 1 1 0 0 1\n\n\n\n\n\n\nGera números aleatórios a partir de uma distribuição de Poisson.\n\nGerar 30 números aleatórios de uma distribuição de Poisson com média 3\n\n\nrpois(30, lambda = 3)\n\n [1] 1 4 4 5 3 5 1 1 4 2 2 3 5 4 0 2 4 2 0 4 2 2 3 5 2 5 1 3 4 3\n\n\n\nrpois(5, 10)    # 5 random values from a Poisson dist. with m.=10\n\n[1]  7 14  6  9 10\n\n\n\nreplicate (100, rpois(5,10))\n\n     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14]\n[1,]    9   18    5    6    8   10    8   11    8     8     7     5    10    11\n[2,]    8   13   14    7   12   10    7   11    6     8     5    11    10     7\n[3,]   12   10    7   13   14    8   14   10   16     8     9    15     8    10\n[4,]    5    8   12   10    7    7    9    7    7     7     5    10    10    12\n[5,]   13   12   11   10   14   10   11   14    6    14    10     9    10     6\n     [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25] [,26]\n[1,]    17     6    17    12     7     8    12     6    13    14    12    11\n[2,]     8    15     6     8    15    11    11    10     7     8     5     7\n[3,]     9    14    12     9     8    12    12     5     8    13    14     9\n[4,]    14     6     8    12    18    15     9     6    11    11    13    10\n[5,]    13    11     8     9    10    10    10    15    11    12    13    11\n     [,27] [,28] [,29] [,30] [,31] [,32] [,33] [,34] [,35] [,36] [,37] [,38]\n[1,]    13     8    14    10    15     6     9    12     6    11    10    15\n[2,]    15    15     7    10    12    10     9     9     9     9    10     9\n[3,]    13     5    12    11     9    11     7     8    12    11    17     6\n[4,]    10    15    13     8    11    10     9    12     8     6     9    13\n[5,]     9    11    19    12     9    18    16    10     6    14    13     8\n     [,39] [,40] [,41] [,42] [,43] [,44] [,45] [,46] [,47] [,48] [,49] [,50]\n[1,]    14     4     6     8     6     7     5    14    11     9    10     9\n[2,]    15     7     8     4     9    11    11     8     7     8     9     7\n[3,]     7    11    14     8     6     9    11    14    11    11     6    12\n[4,]    13     7     9     8     8     5    12     9     7     7    14    11\n[5,]     8    17    16     8     7    11    11    13    17    11     8    10\n     [,51] [,52] [,53] [,54] [,55] [,56] [,57] [,58] [,59] [,60] [,61] [,62]\n[1,]     8     7    10    15    14     8     6    10    10    11    13     9\n[2,]     7     8    19     9    13     9    18     9    10    18    15    14\n[3,]    15    11    10     6    13    13    10    12    10    15    12     8\n[4,]    12     8     7     2     9    10    14     8    15    16     9    13\n[5,]    13     8     6    13    11     3     5     8     3     9    12    14\n     [,63] [,64] [,65] [,66] [,67] [,68] [,69] [,70] [,71] [,72] [,73] [,74]\n[1,]     5     7    18    13    12     7     3    12     6    13     9    10\n[2,]     5     6     5    10     5     7     7    13     9     6    13    14\n[3,]    11     8     9     9    10    14    14    10    10    11    12    14\n[4,]     9    12    10    19    11     9     9     8    11     6     7    10\n[5,]     7    10    10     9    17     7     6    12    10     9     5    10\n     [,75] [,76] [,77] [,78] [,79] [,80] [,81] [,82] [,83] [,84] [,85] [,86]\n[1,]     9     8    11     7    13     8     9     8     9    10    11     7\n[2,]     9     6     8    11    13     8    10    13    15    12     5     5\n[3,]     8    11     7    16    10     9    13     5    12    11     9     9\n[4,]    17     8    10     9     8    12     7    11    14     9     9     3\n[5,]    14    13    10     6    10     7    13    12    11    10    11    10\n     [,87] [,88] [,89] [,90] [,91] [,92] [,93] [,94] [,95] [,96] [,97] [,98]\n[1,]    11     4     6     7    11    12     8    15     6     9    11     9\n[2,]     4     9    10    12     8     8     3     9    13    13    12     8\n[3,]    11     9    11    10     4    10    14    12     8     5     7     8\n[4,]    11    17    15     7     7     6     6     9     9     5    11     9\n[5,]    12    17     5    17    20     7     7     8    11    13     3    16\n     [,99] [,100]\n[1,]    10      6\n[2,]     7     14\n[3,]     6      5\n[4,]    11     13\n[5,]     7      8\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRandom\nvariates\nDensity\nfunction\nCumulative\ndistribution\nQuantile\n\n\n\n\nNormal\nrnorm\ndnorm\npnorm\nqnorm\n\n\nPoisson\nrpois\ndpois\nppois\nqpois\n\n\nBinomial\nrbinom\ndbinom\npbinom\nqbinom\n\n\nUniform\nrunif\ndunif\npunif\nqunif\n\n\n\nTodas as distribuições de probabilidade padrão estão incorporadas no R, incluindo a exponencial (rexp()), qui-quadrado (rchisq()), gama (rgamma()), …"
  },
  {
    "objectID": "j3.7_simulations.html#geração-de-amostras-aleatórias",
    "href": "j3.7_simulations.html#geração-de-amostras-aleatórias",
    "title": "Amostras Aleatórias e Distribuições de Probabilidade",
    "section": "",
    "text": "para gerar amostras aleatórias\n\n#|\nsample(x, size, replace = FALSE, prob = NULL)\n\n\nAmostra aleatória de 5 números de 1 a 10\n\nsample(1:10, 5, replace = TRUE)\n\n[1]  5  6  4 10  8\n\n\nDado\n\nsample(1:6,  4,       replace=TRUE)\n\n[1] 4 5 4 4\n\n\n\nmoeda, 100 lançadas (ver abaixo rbinom)\n\nsample(c(0,1), 100, replace=TRUE)\n\n  [1] 0 1 1 1 0 0 1 0 1 1 1 0 1 0 0 0 1 0 0 0 1 0 1 1 1 0 0 0 0 0 0 1 0 0 1 1 0\n [38] 0 1 0 0 0 0 0 1 1 0 1 1 0 1 1 0 1 1 1 0 0 1 1 0 1 0 0 0 0 1 0 0 0 0 0 1 0\n [75] 1 1 0 0 1 1 0 1 1 1 1 0 1 0 1 1 1 1 0 0 0 0 0 0 0 0\n\n\n\nhist (sample (c(0,1), 100, replace=TRUE))\n\n\n\n\n\nmoeda ‘armadilha’\n\nsample(c(0,1), 100, replace=TRUE, prob=c(0.3, 0.7))\n\n  [1] 0 1 1 1 1 1 0 1 1 1 0 1 1 1 1 1 1 1 1 1 0 0 0 0 1 1 1 1 1 0 1 1 1 0 1 0 0\n [38] 1 0 0 1 0 1 1 1 0 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 0 1 0 1 0 0 0 1 1 1 1 1 1\n [75] 1 1 1 0 1 0 0 1 1 1 1 1 1 0 1 1 0 1 0 1 0 0 1 1 0 1\n\n\n\nhist( sample (c(0,1), 100, replace=TRUE, prob=c(0.3, 0.7))) \nhist( sample (c(0,1), 100, replace=TRUE, prob=c(0.3, 0.7))) \nhist( sample (c(0,1), 100, replace=TRUE, prob=c(0.3, 0.7))) \nhist( sample (c(0,1), 100, replace=TRUE, prob=c(0.3, 0.7))) \n\n \n\n\n\ngera números aleatórios a partir de uma distribuição uniforme.\n\nGerar 10 números aleatórios a partir de uma distribuição uniforme [0, 1]:\n\n\nrunif(10)\n\n [1] 0.70791554 0.44641000 0.04811943 0.77451167 0.02098629 0.62631530\n [7] 0.72643923 0.28312231 0.97223721 0.13370537\n\n\n\n\n\n\ngera números aleatórios a partir de uma distribuição normal.\n\nGerar 100 números aleatórios de uma distribuição normal com média 0 e desvio padrão 1:\n\n\namostra_normal &lt;- rnorm(100, mean = 0, sd = 1)\nprint(amostra_normal)\n\n  [1] -0.13213720 -1.08117659  0.72864697  1.87938876  0.65083070  1.13593531\n  [7] -0.93354073  0.90641326  0.22348408 -0.21765266  0.49937201 -2.27376235\n [13]  0.26970123 -0.40510533 -0.93360759 -1.09152160  1.49655958 -0.35191849\n [19]  0.76659790  0.52650254 -1.51377637  0.47702854  0.98202396 -1.25052239\n [25]  2.24050341  1.34231727  0.74794071 -0.33925129 -1.05955525 -0.78380360\n [31]  0.19902930 -0.85184526  0.57008269  0.65341293 -0.72971474 -0.26047315\n [37]  0.12983822 -0.26547163  1.05654544 -0.48358910  1.02478219 -0.19991669\n [43] -0.08871310  0.47289903 -0.66024410 -2.84679901  0.40333444 -0.06305526\n [49] -0.37932801 -0.71678476 -0.27071317  0.64137787  0.03142291 -1.22330038\n [55] -0.12919277 -0.28602434 -1.17256712  0.15024944 -1.51728706  1.71099445\n [61] -0.21117658 -0.96864323 -0.13405659 -1.63914974  0.26694883  0.41573731\n [67]  0.08544941 -0.09386499 -0.12327886  0.46261003  0.47744770  0.67372154\n [73] -0.48291685 -0.64190745 -1.73968726  0.74202094  1.22997902  0.20839089\n [79] -0.98568850 -0.25937669 -0.63624199 -0.68359073 -1.15615995 -0.62293251\n [85]  1.27633945 -1.11615655 -0.13982196  0.94299652 -0.50700775 -0.17321806\n [91]  0.70763009  3.40444573 -0.11860169 -2.09763904 -0.19315368 -0.93109249\n [97]  0.81951413  2.48050796  1.24245546 -0.15442760\n\n\n\n\n\n\nsimula números aleatórios a partir de uma distribuição binomial.\n\nSimular 50 lançamentos de uma moeda com probabilidade de sucesso 0.5\n\n\nrbinom(50, size = 1, prob = 0.5)\n\n [1] 0 1 0 1 1 0 0 0 1 0 1 1 0 0 1 0 1 1 0 0 0 0 0 1 1 1 0 1 0 0 0 0 1 1 0 0 0 1\n[39] 0 1 1 1 1 0 1 1 1 0 0 1\n\n\n\n\n\n\nGera números aleatórios a partir de uma distribuição de Poisson.\n\nGerar 30 números aleatórios de uma distribuição de Poisson com média 3\n\n\nrpois(30, lambda = 3)\n\n [1] 1 4 4 5 3 5 1 1 4 2 2 3 5 4 0 2 4 2 0 4 2 2 3 5 2 5 1 3 4 3\n\n\n\nrpois(5, 10)    # 5 random values from a Poisson dist. with m.=10\n\n[1]  7 14  6  9 10\n\n\n\nreplicate (100, rpois(5,10))\n\n     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14]\n[1,]    9   18    5    6    8   10    8   11    8     8     7     5    10    11\n[2,]    8   13   14    7   12   10    7   11    6     8     5    11    10     7\n[3,]   12   10    7   13   14    8   14   10   16     8     9    15     8    10\n[4,]    5    8   12   10    7    7    9    7    7     7     5    10    10    12\n[5,]   13   12   11   10   14   10   11   14    6    14    10     9    10     6\n     [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25] [,26]\n[1,]    17     6    17    12     7     8    12     6    13    14    12    11\n[2,]     8    15     6     8    15    11    11    10     7     8     5     7\n[3,]     9    14    12     9     8    12    12     5     8    13    14     9\n[4,]    14     6     8    12    18    15     9     6    11    11    13    10\n[5,]    13    11     8     9    10    10    10    15    11    12    13    11\n     [,27] [,28] [,29] [,30] [,31] [,32] [,33] [,34] [,35] [,36] [,37] [,38]\n[1,]    13     8    14    10    15     6     9    12     6    11    10    15\n[2,]    15    15     7    10    12    10     9     9     9     9    10     9\n[3,]    13     5    12    11     9    11     7     8    12    11    17     6\n[4,]    10    15    13     8    11    10     9    12     8     6     9    13\n[5,]     9    11    19    12     9    18    16    10     6    14    13     8\n     [,39] [,40] [,41] [,42] [,43] [,44] [,45] [,46] [,47] [,48] [,49] [,50]\n[1,]    14     4     6     8     6     7     5    14    11     9    10     9\n[2,]    15     7     8     4     9    11    11     8     7     8     9     7\n[3,]     7    11    14     8     6     9    11    14    11    11     6    12\n[4,]    13     7     9     8     8     5    12     9     7     7    14    11\n[5,]     8    17    16     8     7    11    11    13    17    11     8    10\n     [,51] [,52] [,53] [,54] [,55] [,56] [,57] [,58] [,59] [,60] [,61] [,62]\n[1,]     8     7    10    15    14     8     6    10    10    11    13     9\n[2,]     7     8    19     9    13     9    18     9    10    18    15    14\n[3,]    15    11    10     6    13    13    10    12    10    15    12     8\n[4,]    12     8     7     2     9    10    14     8    15    16     9    13\n[5,]    13     8     6    13    11     3     5     8     3     9    12    14\n     [,63] [,64] [,65] [,66] [,67] [,68] [,69] [,70] [,71] [,72] [,73] [,74]\n[1,]     5     7    18    13    12     7     3    12     6    13     9    10\n[2,]     5     6     5    10     5     7     7    13     9     6    13    14\n[3,]    11     8     9     9    10    14    14    10    10    11    12    14\n[4,]     9    12    10    19    11     9     9     8    11     6     7    10\n[5,]     7    10    10     9    17     7     6    12    10     9     5    10\n     [,75] [,76] [,77] [,78] [,79] [,80] [,81] [,82] [,83] [,84] [,85] [,86]\n[1,]     9     8    11     7    13     8     9     8     9    10    11     7\n[2,]     9     6     8    11    13     8    10    13    15    12     5     5\n[3,]     8    11     7    16    10     9    13     5    12    11     9     9\n[4,]    17     8    10     9     8    12     7    11    14     9     9     3\n[5,]    14    13    10     6    10     7    13    12    11    10    11    10\n     [,87] [,88] [,89] [,90] [,91] [,92] [,93] [,94] [,95] [,96] [,97] [,98]\n[1,]    11     4     6     7    11    12     8    15     6     9    11     9\n[2,]     4     9    10    12     8     8     3     9    13    13    12     8\n[3,]    11     9    11    10     4    10    14    12     8     5     7     8\n[4,]    11    17    15     7     7     6     6     9     9     5    11     9\n[5,]    12    17     5    17    20     7     7     8    11    13     3    16\n     [,99] [,100]\n[1,]    10      6\n[2,]     7     14\n[3,]     6      5\n[4,]    11     13\n[5,]     7      8"
  },
  {
    "objectID": "j3.7_simulations.html#distribuições-de-probabilidades",
    "href": "j3.7_simulations.html#distribuições-de-probabilidades",
    "title": "Amostras Aleatórias e Distribuições de Probabilidade",
    "section": "",
    "text": "Random\nvariates\nDensity\nfunction\nCumulative\ndistribution\nQuantile\n\n\n\n\nNormal\nrnorm\ndnorm\npnorm\nqnorm\n\n\nPoisson\nrpois\ndpois\nppois\nqpois\n\n\nBinomial\nrbinom\ndbinom\npbinom\nqbinom\n\n\nUniform\nrunif\ndunif\npunif\nqunif\n\n\n\nTodas as distribuições de probabilidade padrão estão incorporadas no R, incluindo a exponencial (rexp()), qui-quadrado (rchisq()), gama (rgamma()), …"
  },
  {
    "objectID": "j3.5_estatística1_tools.html",
    "href": "j3.5_estatística1_tools.html",
    "title": "Estatística Descritiva",
    "section": "",
    "text": "mean(x)                        \n\n\nmedian(x)\n\n\n# install.packages(\"lsr\")\nlibrary(\"lsr\")   \n\nmodeOf(x)\n\n\nsummary (x)\n\n\nmin (x)\n\n\nmax (x)\n\n\nrange(x)\n\n\n\nquantile (x, .50)         # quantil 2º\n\n\nquantile (x, .25)          # quartil 1º\n\n\nquantile (x, .75)         # quartil  3º\n\n\n\nvar(S$x)                  # Variância\n\n\nsd(S$x)                     # Desvío padrão (standard deviation)   \n\n\nsd(S$x) /  sqrt (length(S$x))      # Erro padrão (standard error)\n\n\n\n\n\n\nplot (x)    \n\n\nplot (x)\nablineabline (h= mean(x))           # Plot com média                  \n\nabline (h=median(x))                # mais mediana\n\nabline (h=modeOf(x),col=\"blue\")     # mais moda\n\n\n\n\n\n\npar (mfrow =c(1,3))      \n\nplot(x)\n\nplot(xB)\n\nplot(xC)\n\n\nplot(x, ylim=c(0,50))                \n\nplot(x, ylim= c(0,50), xlim=c(0,10)) \n\n\n\n\n\n\nhist(x)\n\nhist(x, right=F)                           # valor da direita no incluido\n\nhist(x, ylim= c(0,50), xlim=c(0,10))        \n\n\n\n\n\n\nstem(x)\n\n\n\n\n\n\ndotchart (x)\n\n\nstripchart(x, method = \"stack\", offset = .5  , at = .15    , pch = 19, cex=1)\n\n\n\n\n\n\n\n\n\n\nboxplot (x)\n\n\n\n\n\nboxplot (x, range=0)\n\n\n\n\n\n\npar (mfrow =c(2,1))  \nboxplot (x, range=0, horizontal=TRUE)\nhist(x)\n\n\n\n\n\n\n\npar (mfrow =c(2,3))  \nboxplot (x, range=0, horizontal=TRUE)\nboxplot (xB, range=0, horizontal=TRUE)\nboxplot (xC, range=0, horizontal=TRUE)\nhist(x)\nhist(xB)\nhist(xC)\n\n\n\n\n\n\nProporções\n\n\nt1 &lt;-table (x)\n\nt2 &lt;- cbind(Freq=t1, \n                Cumul=cumsum(t1), \n                Relative=prop.table(t1), \n                Cum.Rel.=cumsum(prop.table(t1) ) )\nt2\n\n\n\nPercentagens\n\n\nt2per &lt;- cbind(Freq=t1, \n               Cumul=cumsum(t1), \n               Relative=prop.table(t1)*100, \n               Cum.Rel.=cumsum(prop.table(t1)\n               *100))  ; \nt2per\n\n\n\n\n\n\n\n\n\nplot (x, \n      frame=FALSE,\n      col = \"blue\", \n       main = \"x 2021\")\n\n\n\n\n\n\nhttps://www.statmethods.net/graphs/density.html\n\nd &lt;- density(x) # densidade da distribuição    \n\nplot(d) \n\n\nplot(d) # plots the results\npolygon(d, col=\"yellow\", border=\"red\")\n\n\n\n\n\n\nx &lt;- cars$speed\nh&lt;-hist(x, breaks=10, col=\"grey\", xlab=\"x por persona\",\n   main=\"Histograma com  Normal Curve\")\n\nxfit&lt;-seq(min(x),max(x),length=40)\n\nyfit&lt;-dnorm(xfit,mean=mean(x),sd=sd(x))\n\nyfit &lt;- yfit*diff(h$mids[1:2])*length(x)\n\nlines(xfit, yfit, col=\"green\", lwd=2)\n\n\n\nLabels_to_Points_in_Scatterplot\n\nplot(dist ~speed, col=\"lightblue\", pch=19, cex=2,data=cars)\n\ntext(dist~speed, labels=dist,data=cars, cex=0.9, font=2, pos=4)\n\n  \n\n\n\n\n\n\n\n\nt1 &lt;- table (var_cat)    \n\nt1     \n\nprop.table(t1 )\n\nprop.table(t1 )*100\n\nround (prop.table(t1 )*100, digits = 1)\n\naddmargins(t1)\n\n\nround (addmargins(prop.table(t1 )*100),1)\n\n\n\n\n\npie (t1 )        \n\npie (t1, labels = c(\"Não\", \"Sim\"))\n\n\n\n\nbarplot (t1 )        # frequências\n\n\nbarplot (prop.table(t1))    # proporções\n\n\nbarplot(t1 , horiz = TRUE)      # # posição horizontal        \n\n\nbarplot(t1, \n        main = \"Stress dos fumadores\",\n        xlab = \"Stress\", \n        ylab = \"Frequência\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nFrequências\n\nt2 &lt;- table (var_caty,var_catx)       \n\n\nround (addmargins (prop.table (t2,1) * 100), digits=2)\n\n\n\n\n\n\n\nbarplot (t2)\n\n\n\nbarplot(t2,\n         col=c(\"lightblue\", \"white\"),\n        legend = rownames(t2))\n\n\n\n\n\nplot(t2)\n\n\n \n\n\n\n\n\n\n\nlibrary(plyr)\n\nddply(Df,~var_catx,summarise,media=mean(var_numy))\n\n\nddply(Df,~var_catx,summarise,media=mean(Df$var_numy),median=median(Df$var_numy))\n\n\n\n\n\n\n\nboxplot(Df$var_numy~Df$var_catx)\n\n\n\n\n\n\n\n\n\n\n\nplot (D$var_numx, D$var_numy, pch=19)\n\n\n\n\n\n\ncor (D$var_numx, D$var_numy)\n\n\n\n\n\n\nlm (D$var_numy~D$var_numx)\n\n\n\n\n\n\nplot (D$var_numx, D$var_numy, pch=19)\nabline (a=mean(D$var_numy), b=0)\nabline(a=4.993, b=3.161, col=\"red\")   # abline(lm (D$var_numy~D$var_numx))\n\n\n\n\n\n\n\n\nplot(D$var_numx, D$var_numy, main = \"Main title\",\n     xlab = \"X axis title\", \n     ylab = \"Y axis title\",\n     pch = 19, \n     frame = FALSE)\n\n# Add regression line\nabline(lm(D$var_numy ~ D$var_numx, data = D), col = \"blue\")\n\n# Add loess fit\nlines(lowess(D$var_numx, D$var_numy), col = \"red\")\n\n\n\n\n\n\nmod &lt;- lm(var_numy ~ var_numx, data = D)\n# predicts + interval\nnewx &lt;- seq(min(D$var_numx), max(D$var_numx), length.out=100)\npreds &lt;- predict(mod, newdata = data.frame(var_numx=newx), \n                 interval = 'confidence')\n\n# plot\nplot(D$var_numy ~ D$var_numx, data = D)\n# add fill\npolygon(c(rev(newx), newx), c(rev(preds[ ,3]), preds[ ,2]), border = NA)\n# model\nabline(mod)\n# intervals\nlines(newx, preds[ ,3], lty = 'dashed', col = 'red')\nlines(newx, preds[ ,2], lty = 'dashed', col = 'red')"
  },
  {
    "objectID": "j3.5_estatística1_tools.html#uma-numérica",
    "href": "j3.5_estatística1_tools.html#uma-numérica",
    "title": "Estatística Descritiva",
    "section": "",
    "text": "mean(x)                        \n\n\nmedian(x)\n\n\n# install.packages(\"lsr\")\nlibrary(\"lsr\")   \n\nmodeOf(x)\n\n\nsummary (x)\n\n\nmin (x)\n\n\nmax (x)\n\n\nrange(x)\n\n\n\nquantile (x, .50)         # quantil 2º\n\n\nquantile (x, .25)          # quartil 1º\n\n\nquantile (x, .75)         # quartil  3º\n\n\n\nvar(S$x)                  # Variância\n\n\nsd(S$x)                     # Desvío padrão (standard deviation)   \n\n\nsd(S$x) /  sqrt (length(S$x))      # Erro padrão (standard error)\n\n\n\n\n\n\nplot (x)    \n\n\nplot (x)\nablineabline (h= mean(x))           # Plot com média                  \n\nabline (h=median(x))                # mais mediana\n\nabline (h=modeOf(x),col=\"blue\")     # mais moda\n\n\n\n\n\n\npar (mfrow =c(1,3))      \n\nplot(x)\n\nplot(xB)\n\nplot(xC)\n\n\nplot(x, ylim=c(0,50))                \n\nplot(x, ylim= c(0,50), xlim=c(0,10)) \n\n\n\n\n\n\nhist(x)\n\nhist(x, right=F)                           # valor da direita no incluido\n\nhist(x, ylim= c(0,50), xlim=c(0,10))        \n\n\n\n\n\n\nstem(x)\n\n\n\n\n\n\ndotchart (x)\n\n\nstripchart(x, method = \"stack\", offset = .5  , at = .15    , pch = 19, cex=1)\n\n\n\n\n\n\n\n\n\n\nboxplot (x)\n\n\n\n\n\nboxplot (x, range=0)\n\n\n\n\n\n\npar (mfrow =c(2,1))  \nboxplot (x, range=0, horizontal=TRUE)\nhist(x)\n\n\n\n\n\n\n\npar (mfrow =c(2,3))  \nboxplot (x, range=0, horizontal=TRUE)\nboxplot (xB, range=0, horizontal=TRUE)\nboxplot (xC, range=0, horizontal=TRUE)\nhist(x)\nhist(xB)\nhist(xC)\n\n\n\n\n\n\nProporções\n\n\nt1 &lt;-table (x)\n\nt2 &lt;- cbind(Freq=t1, \n                Cumul=cumsum(t1), \n                Relative=prop.table(t1), \n                Cum.Rel.=cumsum(prop.table(t1) ) )\nt2\n\n\n\nPercentagens\n\n\nt2per &lt;- cbind(Freq=t1, \n               Cumul=cumsum(t1), \n               Relative=prop.table(t1)*100, \n               Cum.Rel.=cumsum(prop.table(t1)\n               *100))  ; \nt2per"
  },
  {
    "objectID": "j3.5_estatística1_tools.html#mais.",
    "href": "j3.5_estatística1_tools.html#mais.",
    "title": "Estatística Descritiva",
    "section": "",
    "text": "plot (x, \n      frame=FALSE,\n      col = \"blue\", \n       main = \"x 2021\")\n\n\n\n\n\n\nhttps://www.statmethods.net/graphs/density.html\n\nd &lt;- density(x) # densidade da distribuição    \n\nplot(d) \n\n\nplot(d) # plots the results\npolygon(d, col=\"yellow\", border=\"red\")\n\n\n\n\n\n\nx &lt;- cars$speed\nh&lt;-hist(x, breaks=10, col=\"grey\", xlab=\"x por persona\",\n   main=\"Histograma com  Normal Curve\")\n\nxfit&lt;-seq(min(x),max(x),length=40)\n\nyfit&lt;-dnorm(xfit,mean=mean(x),sd=sd(x))\n\nyfit &lt;- yfit*diff(h$mids[1:2])*length(x)\n\nlines(xfit, yfit, col=\"green\", lwd=2)\n\n\n\nLabels_to_Points_in_Scatterplot\n\nplot(dist ~speed, col=\"lightblue\", pch=19, cex=2,data=cars)\n\ntext(dist~speed, labels=dist,data=cars, cex=0.9, font=2, pos=4)"
  },
  {
    "objectID": "j3.5_estatística1_tools.html#uma-categorica",
    "href": "j3.5_estatística1_tools.html#uma-categorica",
    "title": "Estatística Descritiva",
    "section": "",
    "text": "t1 &lt;- table (var_cat)    \n\nt1     \n\nprop.table(t1 )\n\nprop.table(t1 )*100\n\nround (prop.table(t1 )*100, digits = 1)\n\naddmargins(t1)\n\n\nround (addmargins(prop.table(t1 )*100),1)\n\n\n\n\n\npie (t1 )        \n\npie (t1, labels = c(\"Não\", \"Sim\"))\n\n\n\n\nbarplot (t1 )        # frequências\n\n\nbarplot (prop.table(t1))    # proporções\n\n\nbarplot(t1 , horiz = TRUE)      # # posição horizontal        \n\n\nbarplot(t1, \n        main = \"Stress dos fumadores\",\n        xlab = \"Stress\", \n        ylab = \"Frequência\")"
  },
  {
    "objectID": "j3.5_estatística1_tools.html#tabela-1",
    "href": "j3.5_estatística1_tools.html#tabela-1",
    "title": "Estatística Descritiva",
    "section": "",
    "text": "Frequências\n\nt2 &lt;- table (var_caty,var_catx)       \n\n\nround (addmargins (prop.table (t2,1) * 100), digits=2)"
  },
  {
    "objectID": "j3.5_estatística1_tools.html#barplot-1",
    "href": "j3.5_estatística1_tools.html#barplot-1",
    "title": "Estatística Descritiva",
    "section": "",
    "text": "barplot (t2)\n\n\n\nbarplot(t2,\n         col=c(\"lightblue\", \"white\"),\n        legend = rownames(t2))\n\n\n\n\n\nplot(t2)"
  },
  {
    "objectID": "j3.5_estatística1_tools.html#categorica-quantitativa",
    "href": "j3.5_estatística1_tools.html#categorica-quantitativa",
    "title": "Estatística Descritiva",
    "section": "",
    "text": "library(plyr)\n\nddply(Df,~var_catx,summarise,media=mean(var_numy))\n\n\nddply(Df,~var_catx,summarise,media=mean(Df$var_numy),median=median(Df$var_numy))"
  },
  {
    "objectID": "j3.5_estatística1_tools.html#boxplot-por-categoria",
    "href": "j3.5_estatística1_tools.html#boxplot-por-categoria",
    "title": "Estatística Descritiva",
    "section": "",
    "text": "boxplot(Df$var_numy~Df$var_catx)"
  },
  {
    "objectID": "j3.5_estatística1_tools.html#numérica-numérica",
    "href": "j3.5_estatística1_tools.html#numérica-numérica",
    "title": "Estatística Descritiva",
    "section": "",
    "text": "plot (D$var_numx, D$var_numy, pch=19)\n\n\n\n\n\n\ncor (D$var_numx, D$var_numy)\n\n\n\n\n\n\nlm (D$var_numy~D$var_numx)\n\n\n\n\n\n\nplot (D$var_numx, D$var_numy, pch=19)\nabline (a=mean(D$var_numy), b=0)\nabline(a=4.993, b=3.161, col=\"red\")   # abline(lm (D$var_numy~D$var_numx))"
  },
  {
    "objectID": "j3.5_estatística1_tools.html#mais",
    "href": "j3.5_estatística1_tools.html#mais",
    "title": "Estatística Descritiva",
    "section": "",
    "text": "plot(D$var_numx, D$var_numy, main = \"Main title\",\n     xlab = \"X axis title\", \n     ylab = \"Y axis title\",\n     pch = 19, \n     frame = FALSE)\n\n# Add regression line\nabline(lm(D$var_numy ~ D$var_numx, data = D), col = \"blue\")\n\n# Add loess fit\nlines(lowess(D$var_numx, D$var_numy), col = \"red\")\n\n\n\n\n\n\nmod &lt;- lm(var_numy ~ var_numx, data = D)\n# predicts + interval\nnewx &lt;- seq(min(D$var_numx), max(D$var_numx), length.out=100)\npreds &lt;- predict(mod, newdata = data.frame(var_numx=newx), \n                 interval = 'confidence')\n\n# plot\nplot(D$var_numy ~ D$var_numx, data = D)\n# add fill\npolygon(c(rev(newx), newx), c(rev(preds[ ,3]), preds[ ,2]), border = NA)\n# model\nabline(mod)\n# intervals\nlines(newx, preds[ ,3], lty = 'dashed', col = 'red')\nlines(newx, preds[ ,2], lty = 'dashed', col = 'red')"
  }
]